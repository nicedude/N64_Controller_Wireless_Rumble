
NRF_N64_Basestation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000009a  00800060  00800060  0000076e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010fe  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000020a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000825  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f5  00000000  00000000  000030e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000443  00000000  00000000  000036dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	38 c0       	rjmp	.+112    	; 0x74 <__bad_interrupt>
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	36 c0       	rjmp	.+108    	; 0x74 <__bad_interrupt>
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	31 c0       	rjmp	.+98     	; 0x76 <__vector_9>
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	2e c0       	rjmp	.+92     	; 0x74 <__bad_interrupt>
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__bad_interrupt>
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	0f c1       	rjmp	.+542    	; 0x246 <set_charlie+0xac>
  28:	07 c1       	rjmp	.+526    	; 0x238 <set_charlie+0x9e>
  2a:	ff c0       	rjmp	.+510    	; 0x22a <set_charlie+0x90>
  2c:	f7 c0       	rjmp	.+494    	; 0x21c <set_charlie+0x82>
  2e:	ef c0       	rjmp	.+478    	; 0x20e <set_charlie+0x74>
  30:	e7 c0       	rjmp	.+462    	; 0x200 <set_charlie+0x66>
  32:	df c0       	rjmp	.+446    	; 0x1f2 <set_charlie+0x58>
  34:	d7 c0       	rjmp	.+430    	; 0x1e4 <set_charlie+0x4a>
  36:	cf c0       	rjmp	.+414    	; 0x1d6 <set_charlie+0x3c>
  38:	c7 c0       	rjmp	.+398    	; 0x1c8 <set_charlie+0x2e>
  3a:	bf c0       	rjmp	.+382    	; 0x1ba <set_charlie+0x20>
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <set_charlie+0x12>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf e5       	ldi	r28, 0x5F	; 95
  44:	d4 e0       	ldi	r29, 0x04	; 4
  46:	de bf       	out	0x3e, r29	; 62
  48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	ea ef       	ldi	r30, 0xFA	; 250
  52:	f6 e0       	ldi	r31, 0x06	; 6
  54:	02 c0       	rjmp	.+4      	; 0x5a <__do_copy_data+0x10>
  56:	05 90       	lpm	r0, Z+
  58:	0d 92       	st	X+, r0
  5a:	a0 36       	cpi	r26, 0x60	; 96
  5c:	b1 07       	cpc	r27, r17
  5e:	d9 f7       	brne	.-10     	; 0x56 <__do_copy_data+0xc>

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 3f       	cpi	r26, 0xFA	; 250
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	9c d2       	rcall	.+1336   	; 0x5aa <main>
  72:	41 c3       	rjmp	.+1666   	; 0x6f6 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_9>:
uint16_t LED_PATTERN;
uint8_t ovf_count=0;
uint8_t charlie_counter=0;

ISR (TIMER0_OVF_vect) //runs at 1MHz/256 = 3906,25Hz
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	3f 93       	push	r19
  84:	4f 93       	push	r20
  86:	5f 93       	push	r21
  88:	6f 93       	push	r22
  8a:	7f 93       	push	r23
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31
	ovf_count++;
  94:	80 91 61 00 	lds	r24, 0x0061
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	80 93 61 00 	sts	0x0061, r24
	if (ovf_count<32) return;	//half the frq: 1953,125Hz - period= 512µS
  9e:	80 32       	cpi	r24, 0x20	; 32
  a0:	68 f1       	brcs	.+90     	; 0xfc <__vector_9+0x86>
	ovf_count=0;
  a2:	10 92 61 00 	sts	0x0061, r1
	
	PORTC=0;
  a6:	15 ba       	out	0x15, r1	; 21
	if (LED_PATTERN & (1<<charlie_counter))
  a8:	20 91 60 00 	lds	r18, 0x0060
  ac:	82 2f       	mov	r24, r18
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	ba 01       	movw	r22, r20
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__vector_9+0x46>
  b8:	66 0f       	add	r22, r22
  ba:	77 1f       	adc	r23, r23
  bc:	2a 95       	dec	r18
  be:	e2 f7       	brpl	.-8      	; 0xb8 <__vector_9+0x42>
  c0:	9b 01       	movw	r18, r22
  c2:	40 91 78 00 	lds	r20, 0x0078
  c6:	50 91 79 00 	lds	r21, 0x0079
  ca:	24 23       	and	r18, r20
  cc:	35 23       	and	r19, r21
  ce:	21 15       	cp	r18, r1
  d0:	31 05       	cpc	r19, r1
  d2:	59 f0       	breq	.+22     	; 0xea <__vector_9+0x74>
	{
		DDRC=charlie.LEDS[charlie_counter].DDRS;
  d4:	24 e6       	ldi	r18, 0x64	; 100
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e2 0f       	add	r30, r18
  e0:	f3 1f       	adc	r31, r19
  e2:	80 81       	ld	r24, Z
  e4:	84 bb       	out	0x14, r24	; 20
		PORTC=charlie.LEDS[charlie_counter].PORT;
  e6:	81 81       	ldd	r24, Z+1	; 0x01
  e8:	85 bb       	out	0x15, r24	; 21
	}
	charlie_counter++;
  ea:	80 91 60 00 	lds	r24, 0x0060
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 60 00 	sts	0x0060, r24
	if (charlie_counter>9) charlie_counter=0;
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	10 f0       	brcs	.+4      	; 0xfc <__vector_9+0x86>
  f8:	10 92 60 00 	sts	0x0060, r1
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	7f 91       	pop	r23
 106:	6f 91       	pop	r22
 108:	5f 91       	pop	r21
 10a:	4f 91       	pop	r20
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <setup_charlie_struct>:
	//setup bit patterns for DDRs and output pins.
	
	//PB4 and PB5 are input.
	
	//HLZZ:
	charlie.LEDS[0].DDRS=0b001100;
 11a:	2c e0       	ldi	r18, 0x0C	; 12
 11c:	20 93 64 00 	sts	0x0064, r18
	charlie.LEDS[0].PORT=0b1000;
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	80 93 65 00 	sts	0x0065, r24
	//ZHZL:
	charlie.LEDS[1].DDRS=0b000101;
 126:	95 e0       	ldi	r25, 0x05	; 5
 128:	90 93 66 00 	sts	0x0066, r25
	charlie.LEDS[1].PORT=0b0100;
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	80 93 67 00 	sts	0x0067, r24
	//ZHLZ:
	charlie.LEDS[2].DDRS=0b000110;
 132:	36 e0       	ldi	r19, 0x06	; 6
 134:	30 93 68 00 	sts	0x0068, r19
	charlie.LEDS[2].PORT=0b0100;
 138:	80 93 69 00 	sts	0x0069, r24
	//LHZZ:
	charlie.LEDS[3].DDRS=0b001100;
 13c:	20 93 6a 00 	sts	0x006A, r18
	charlie.LEDS[3].PORT=0b0100;
 140:	80 93 6b 00 	sts	0x006B, r24
	//ZZHL:
	charlie.LEDS[4].DDRS=0b000011;
 144:	23 e0       	ldi	r18, 0x03	; 3
 146:	20 93 6c 00 	sts	0x006C, r18
	charlie.LEDS[4].PORT=0b0010;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 6d 00 	sts	0x006D, r24
	//ZLHZ:
	charlie.LEDS[5].DDRS=0b000110;
 150:	30 93 6e 00 	sts	0x006E, r19
	charlie.LEDS[5].PORT=0b0010;
 154:	80 93 6f 00 	sts	0x006F, r24
	//LZHZ:
	charlie.LEDS[6].DDRS=0b001010;
 158:	3a e0       	ldi	r19, 0x0A	; 10
 15a:	30 93 70 00 	sts	0x0070, r19
	charlie.LEDS[6].PORT=0b0010;
 15e:	80 93 71 00 	sts	0x0071, r24
	//ZZLH:
	charlie.LEDS[7].DDRS=0b000011;
 162:	20 93 72 00 	sts	0x0072, r18
	charlie.LEDS[7].PORT=0b000001;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 73 00 	sts	0x0073, r24
	//ZLZH:
	charlie.LEDS[8].DDRS=0b000101;
 16c:	90 93 74 00 	sts	0x0074, r25
	charlie.LEDS[8].PORT=0b0001;
 170:	80 93 75 00 	sts	0x0075, r24
	//LZZH:
	charlie.LEDS[9].DDRS=0b001001;
 174:	99 e0       	ldi	r25, 0x09	; 9
 176:	90 93 76 00 	sts	0x0076, r25
	charlie.LEDS[9].PORT=0b0001;
 17a:	80 93 77 00 	sts	0x0077, r24
	
}
 17e:	08 95       	ret

00000180 <setup_charlie>:


void setup_charlie(void)
{
	setup_charlie_struct();
 180:	cc df       	rcall	.-104    	; 0x11a <setup_charlie_struct>
	
	
	//SET THE APPROPRIATE FREQUENCY:
	
	
	DDRC=0; //input all the things!
 182:	14 ba       	out	0x14, r1	; 20
	PORTC=0;
 184:	15 ba       	out	0x15, r1	; 21
	MCUCR&=~(1<<PUD);
 186:	85 b7       	in	r24, 0x35	; 53
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	85 bf       	out	0x35, r24	; 53
	
	//timer0 set up to interrupt on overflow @ 1MHz/8/256 = 488,28125Hz
	TCCR0|=(1<<CS00); //prescaler to /1
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0); //Overflow interrupt enabled
 192:	89 b7       	in	r24, 0x39	; 57
 194:	81 60       	ori	r24, 0x01	; 1
 196:	89 bf       	out	0x39, r24	; 57
	
	//ADCSRB Standard values are fine
	//	DIDR0|=(1<<ADC2D); //disable digital input on ADC ch2 (PB4)
	//	ADCSRA|=(1<<ADSC); //GO!
	
}
 198:	08 95       	ret

0000019a <set_charlie>:


void set_charlie(uint8_t charlieVal)
{
	switch (charlieVal)
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ec 30       	cpi	r30, 0x0C	; 12
 1a0:	f1 05       	cpc	r31, r1
 1a2:	08 f0       	brcs	.+2      	; 0x1a6 <set_charlie+0xc>
 1a4:	55 c0       	rjmp	.+170    	; 0x250 <set_charlie+0xb6>
 1a6:	ed 5e       	subi	r30, 0xED	; 237
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	09 94       	ijmp
	{
		case 11: //one louder.
		LED_PATTERN = 0xAAA;
 1ac:	8a ea       	ldi	r24, 0xAA	; 170
 1ae:	9a e0       	ldi	r25, 0x0A	; 10
 1b0:	90 93 79 00 	sts	0x0079, r25
 1b4:	80 93 78 00 	sts	0x0078, r24
		break;
 1b8:	08 95       	ret
		case 10:
		LED_PATTERN = 0b1111111111;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	93 e0       	ldi	r25, 0x03	; 3
 1be:	90 93 79 00 	sts	0x0079, r25
 1c2:	80 93 78 00 	sts	0x0078, r24
		break;
 1c6:	08 95       	ret
		case 9:
		LED_PATTERN = 0b0111111111;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	90 93 79 00 	sts	0x0079, r25
 1d0:	80 93 78 00 	sts	0x0078, r24
		break;
 1d4:	08 95       	ret
		case 8:
		LED_PATTERN = 0b0011111111;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 79 00 	sts	0x0079, r25
 1de:	80 93 78 00 	sts	0x0078, r24
		break;
 1e2:	08 95       	ret
		case 7:
		LED_PATTERN = 0b0001111111;
 1e4:	8f e7       	ldi	r24, 0x7F	; 127
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 79 00 	sts	0x0079, r25
 1ec:	80 93 78 00 	sts	0x0078, r24
		break;
 1f0:	08 95       	ret
		case 6:
		LED_PATTERN = 0b0000111111;
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 79 00 	sts	0x0079, r25
 1fa:	80 93 78 00 	sts	0x0078, r24
		break;
 1fe:	08 95       	ret
		case 5:
		LED_PATTERN = 0b0000011111;
 200:	8f e1       	ldi	r24, 0x1F	; 31
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 79 00 	sts	0x0079, r25
 208:	80 93 78 00 	sts	0x0078, r24
		break;
 20c:	08 95       	ret
		case 4:
		LED_PATTERN = 0b0000001111;
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 79 00 	sts	0x0079, r25
 216:	80 93 78 00 	sts	0x0078, r24
		break;
 21a:	08 95       	ret
		case 3:
		LED_PATTERN = 0b0000000111;
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 79 00 	sts	0x0079, r25
 224:	80 93 78 00 	sts	0x0078, r24
		break;
 228:	08 95       	ret
		case 2:
		LED_PATTERN = 0b0000000011;
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 79 00 	sts	0x0079, r25
 232:	80 93 78 00 	sts	0x0078, r24
		break;
 236:	08 95       	ret
		case 1:
		LED_PATTERN = 0b0000000001;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 79 00 	sts	0x0079, r25
 240:	80 93 78 00 	sts	0x0078, r24
		break;
 244:	08 95       	ret
		case 0:
		LED_PATTERN = 0b0000000000;
 246:	10 92 79 00 	sts	0x0079, r1
 24a:	10 92 78 00 	sts	0x0078, r1
		break;
 24e:	08 95       	ret
		default:
		LED_PATTERN = 0b0101010101;
 250:	85 e5       	ldi	r24, 0x55	; 85
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	90 93 79 00 	sts	0x0079, r25
 258:	80 93 78 00 	sts	0x0078, r24
 25c:	08 95       	ret

0000025e <roll_charlie>:
		break;
	}
}

void roll_charlie(void) //scroll the LED's (during reload)
{
 25e:	cf 93       	push	r28
	uint8_t i;
	for (i=0;i<=10;i++)
 260:	c0 e0       	ldi	r28, 0x00	; 0
	{
		set_charlie(i);
 262:	8c 2f       	mov	r24, r28
 264:	9a df       	rcall	.-204    	; 0x19a <set_charlie>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	90 e7       	ldi	r25, 0x70	; 112
 26a:	a2 e0       	ldi	r26, 0x02	; 2
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <roll_charlie+0xe>
 274:	00 c0       	rjmp	.+0      	; 0x276 <roll_charlie+0x18>
 276:	00 00       	nop
}

void roll_charlie(void) //scroll the LED's (during reload)
{
	uint8_t i;
	for (i=0;i<=10;i++)
 278:	cf 5f       	subi	r28, 0xFF	; 255
 27a:	cb 30       	cpi	r28, 0x0B	; 11
 27c:	91 f7       	brne	.-28     	; 0x262 <roll_charlie+0x4>
	{
		set_charlie(i);
		_delay_ms(100);
	}
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <charlie_blink>:

void charlie_blink(void) //Blink the LED's
{
	set_charlie(11);
 282:	8b e0       	ldi	r24, 0x0B	; 11
 284:	8a df       	rcall	.-236    	; 0x19a <set_charlie>
 286:	8f e7       	ldi	r24, 0x7F	; 127
 288:	98 e3       	ldi	r25, 0x38	; 56
 28a:	a1 e0       	ldi	r26, 0x01	; 1
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	a0 40       	sbci	r26, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <charlie_blink+0xa>
 294:	00 c0       	rjmp	.+0      	; 0x296 <charlie_blink+0x14>
 296:	00 00       	nop
	//LED_PATTERN=0xAAA;
	_delay_ms(50);
	//LED_PATTERN=0x555;
	set_charlie(12);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	7f df       	rcall	.-258    	; 0x19a <set_charlie>
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	98 e3       	ldi	r25, 0x38	; 56
 2a0:	a1 e0       	ldi	r26, 0x01	; 1
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	a0 40       	sbci	r26, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <charlie_blink+0x20>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <charlie_blink+0x2a>
 2ac:	00 00       	nop
	_delay_ms(50);
}
 2ae:	08 95       	ret

000002b0 <nrf_send_config>:

//////////////////////////////////////////////////////////////
//  Send the configuration word to the nRF
//
//////////////////////////////////////////////////////////////
void nrf_send_config(char nr_of_bytes){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29

	char helper;

	switch (nr_of_bytes) {
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	09 f4       	brne	.+2      	; 0x2ba <nrf_send_config+0xa>
 2b8:	80 c0       	rjmp	.+256    	; 0x3ba <nrf_send_config+0x10a>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	20 f4       	brcc	.+8      	; 0x2c6 <nrf_send_config+0x16>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <nrf_send_config+0x14>
 2c2:	9e c0       	rjmp	.+316    	; 0x400 <nrf_send_config+0x150>
 2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <nrf_send_config+0x24>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	09 f4       	brne	.+2      	; 0x2cc <nrf_send_config+0x1c>
 2ca:	83 c0       	rjmp	.+262    	; 0x3d2 <nrf_send_config+0x122>
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <nrf_send_config+0x22>
 2d0:	97 c0       	rjmp	.+302    	; 0x400 <nrf_send_config+0x150>
 2d2:	8d c0       	rjmp	.+282    	; 0x3ee <nrf_send_config+0x13e>
		case 1:
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // addr: 0x00.
 2d4:	cb e7       	ldi	r28, 0x7B	; 123
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	90 91 ac 00 	lds	r25, 0x00AC
 2dc:	88 81       	ld	r24, Y
 2de:	89 2b       	or	r24, r25
 2e0:	77 d1       	rcall	.+750    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.config);                                   // default  00010000b.
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	75 d1       	rcall	.+746    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.en_aa_addr | nrf_conf.write_reg);          // addr: 0x01.
 2e6:	90 91 ac 00 	lds	r25, 0x00AC
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	89 2b       	or	r24, r25
 2ee:	70 d1       	rcall	.+736    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.en_aa);                                    // default  00111111b. // DEBUG set all to 0x00.
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	6e d1       	rcall	.+732    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.en_rxaddr_addr | nrf_conf.write_reg);      // addr: 0x02.
 2f4:	90 91 ac 00 	lds	r25, 0x00AC
 2f8:	8c 81       	ldd	r24, Y+4	; 0x04
 2fa:	89 2b       	or	r24, r25
 2fc:	69 d1       	rcall	.+722    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.en_rxaddr);                                // default  00000011b.
 2fe:	8d 81       	ldd	r24, Y+5	; 0x05
 300:	67 d1       	rcall	.+718    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_aw_addr | nrf_conf.write_reg);       // addr: 0x03.
 302:	90 91 ac 00 	lds	r25, 0x00AC
 306:	8e 81       	ldd	r24, Y+6	; 0x06
 308:	89 2b       	or	r24, r25
 30a:	62 d1       	rcall	.+708    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_aw);                                 // default  00000011b.
 30c:	8f 81       	ldd	r24, Y+7	; 0x07
 30e:	60 d1       	rcall	.+704    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_ptr_addr | nrf_conf.write_reg);      // addr: 0x04.
 310:	90 91 ac 00 	lds	r25, 0x00AC
 314:	88 85       	ldd	r24, Y+8	; 0x08
 316:	89 2b       	or	r24, r25
 318:	5b d1       	rcall	.+694    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_ptr);                                // default  00000011b.
 31a:	89 85       	ldd	r24, Y+9	; 0x09
 31c:	59 d1       	rcall	.+690    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_channel_addr | nrf_conf.write_reg);     // addr: 0x05.
 31e:	90 91 ac 00 	lds	r25, 0x00AC
 322:	8a 85       	ldd	r24, Y+10	; 0x0a
 324:	89 2b       	or	r24, r25
 326:	54 d1       	rcall	.+680    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_channel);                               // default  00000011b.
 328:	8b 85       	ldd	r24, Y+11	; 0x0b
 32a:	52 d1       	rcall	.+676    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_setup_addr | nrf_conf.write_reg);       // addr: 0x06.
 32c:	90 91 ac 00 	lds	r25, 0x00AC
 330:	8c 85       	ldd	r24, Y+12	; 0x0c
 332:	89 2b       	or	r24, r25
 334:	4d d1       	rcall	.+666    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_setup);                                 // default  00001111b.
 336:	8d 85       	ldd	r24, Y+13	; 0x0d
 338:	4b d1       	rcall	.+662    	; 0x5d0 <spi_load_byte>

      spi_load_byte(nrf_conf.rx_addr_p0_addr | nrf_conf.write_reg);     // addr: 0x0A.
 33a:	90 91 ac 00 	lds	r25, 0x00AC
 33e:	8c 89       	ldd	r24, Y+20	; 0x14
 340:	89 2b       	or	r24, r25
 342:	46 d1       	rcall	.+652    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rx_addr_p0);                               // set to 00000010b.
 344:	8d 89       	ldd	r24, Y+21	; 0x15
 346:	44 d1       	rcall	.+648    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_addr_p1_addr | nrf_conf.write_reg);     // addr: 0x0B.
 348:	90 91 ac 00 	lds	r25, 0x00AC
 34c:	8e 89       	ldd	r24, Y+22	; 0x16
 34e:	89 2b       	or	r24, r25
 350:	3f d1       	rcall	.+638    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.rx_addr_p1);                               // set to 00000010b.
 352:	8f 89       	ldd	r24, Y+23	; 0x17
 354:	3d d1       	rcall	.+634    	; 0x5d0 <spi_load_byte>
                                                                        // 0X0C -0X0F no use at the moment.

			spi_load_byte(nrf_conf.tx_addr_addr | nrf_conf.write_reg);        // addr: 0x010.
 356:	90 91 ac 00 	lds	r25, 0x00AC
 35a:	88 a1       	lds	r24, 0x48
 35c:	89 2b       	or	r24, r25
 35e:	38 d1       	rcall	.+624    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.tx_addr);                                  // default  00000000b.
 360:	89 a1       	lds	r24, 0x49
 362:	36 d1       	rcall	.+620    	; 0x5d0 <spi_load_byte>

      spi_load_byte(nrf_conf.rx_pw_p0_addr | nrf_conf.write_reg);       // addr: 0x011.
 364:	90 91 ac 00 	lds	r25, 0x00AC
 368:	8a a1       	lds	r24, 0x4a
 36a:	89 2b       	or	r24, r25
 36c:	31 d1       	rcall	.+610    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p0);                                 // set to  00000010b.
 36e:	8b a1       	lds	r24, 0x4b
 370:	2f d1       	rcall	.+606    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p1_addr | nrf_conf.write_reg);       // addr: 0x012.
 372:	90 91 ac 00 	lds	r25, 0x00AC
 376:	8c a1       	lds	r24, 0x4c
 378:	89 2b       	or	r24, r25
 37a:	2a d1       	rcall	.+596    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p1);                                 // set to  00000010b.
 37c:	8d a1       	lds	r24, 0x4d
 37e:	28 d1       	rcall	.+592    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p2_addr | nrf_conf.write_reg);       // addr: 0x013.
 380:	90 91 ac 00 	lds	r25, 0x00AC
 384:	8e a1       	lds	r24, 0x4e
 386:	89 2b       	or	r24, r25
 388:	23 d1       	rcall	.+582    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p2);                                 // default  00000000b.
 38a:	8f a1       	lds	r24, 0x4f
 38c:	21 d1       	rcall	.+578    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p3_addr | nrf_conf.write_reg);       // addr: 0x014.
 38e:	90 91 ac 00 	lds	r25, 0x00AC
 392:	88 a5       	lds	r24, 0x68
 394:	89 2b       	or	r24, r25
 396:	1c d1       	rcall	.+568    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p3);                                 // default  00000000b.
 398:	89 a5       	lds	r24, 0x69
 39a:	1a d1       	rcall	.+564    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p4_addr | nrf_conf.write_reg);       // addr: 0x015.
 39c:	90 91 ac 00 	lds	r25, 0x00AC
 3a0:	8a a5       	lds	r24, 0x6a
 3a2:	89 2b       	or	r24, r25
 3a4:	15 d1       	rcall	.+554    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p4);                                 // default  00000000b.
 3a6:	8b a5       	lds	r24, 0x6b
 3a8:	13 d1       	rcall	.+550    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p5_addr | nrf_conf.write_reg);       // addr: 0x016.
 3aa:	90 91 ac 00 	lds	r25, 0x00AC
 3ae:	8c a5       	lds	r24, 0x6c
 3b0:	89 2b       	or	r24, r25
 3b2:	0e d1       	rcall	.+540    	; 0x5d0 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p5);                                 // default  00000000b.
 3b4:	8d a5       	lds	r24, 0x6d
 3b6:	0c d1       	rcall	.+536    	; 0x5d0 <spi_load_byte>
     break; 
 3b8:	23 c0       	rjmp	.+70     	; 0x400 <nrf_send_config+0x150>

		 case 2: // configure the nRF24L01 as transmitter & power_up.
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // 00100000b.
 3ba:	cb e7       	ldi	r28, 0x7B	; 123
 3bc:	d0 e0       	ldi	r29, 0x00	; 0
 3be:	90 91 ac 00 	lds	r25, 0x00AC
 3c2:	88 81       	ld	r24, Y
 3c4:	89 2b       	or	r24, r25
 3c6:	04 d1       	rcall	.+520    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.config | nrf_conf.pw_up);                  // 00010010b.
 3c8:	9a a9       	sts	0x4a, r25
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	89 2b       	or	r24, r25
 3ce:	00 d1       	rcall	.+512    	; 0x5d0 <spi_load_byte>
     break; 
 3d0:	17 c0       	rjmp	.+46     	; 0x400 <nrf_send_config+0x150>

		 case 3: // configure the nRF24L01 as receiver & power_up.
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // 00100000b.
 3d2:	cb e7       	ldi	r28, 0x7B	; 123
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
 3d6:	90 91 ac 00 	lds	r25, 0x00AC
 3da:	88 81       	ld	r24, Y
 3dc:	89 2b       	or	r24, r25
 3de:	f8 d0       	rcall	.+496    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.config | nrf_conf.pw_up | nrf_conf.txrx);  // 00010011b.
 3e0:	9a a9       	sts	0x4a, r25
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	89 2b       	or	r24, r25
 3e6:	98 a9       	sts	0x48, r25
 3e8:	89 2b       	or	r24, r25
 3ea:	f2 d0       	rcall	.+484    	; 0x5d0 <spi_load_byte>
     break;
 3ec:	09 c0       	rjmp	.+18     	; 0x400 <nrf_send_config+0x150>

		 case 4: // clear the nRF24L01 status register.
			spi_load_byte(nrf_conf.status_addr | nrf_conf.write_reg);         // 00100111b.
 3ee:	90 91 ac 00 	lds	r25, 0x00AC
 3f2:	80 91 89 00 	lds	r24, 0x0089
 3f6:	89 2b       	or	r24, r25
 3f8:	eb d0       	rcall	.+470    	; 0x5d0 <spi_load_byte>
			spi_load_byte(nrf_conf.status);                                   // 01110000b.
 3fa:	80 91 8a 00 	lds	r24, 0x008A
 3fe:	e8 d0       	rcall	.+464    	; 0x5d0 <spi_load_byte>
	    }
	    spi_exchange(0);                                                   // send configuration bytes.
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	00 d1       	rcall	.+512    	; 0x604 <spi_exchange>
	  return;
  	 
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <nrf_reset_status>:
//////////////////////////////////////////////////////////////
// clear the status register of the nRF24L01
//////////////////////////////////////////////////////////////
void nrf_reset_status(){
  //char aux = nrf_ce;
 char aux = NRF_CE_PORT&(1<<NRF_CE_BV);
 40a:	82 b3       	in	r24, 0x12	; 18
    //nrf_ce = 0;                     	        // to be sure the nRF  is a transmitter.
	NRF_CE_low();
 40c:	95 98       	cbi	0x12, 5	; 18
    nrf_conf.status_addr = NRF_STATUS;        // 0x07 (address).
 40e:	87 e0       	ldi	r24, 0x07	; 7
 410:	80 93 89 00 	sts	0x0089, r24
    nrf_conf.status      = NRF_STAT_CLEAR;    // 01110000b. 
 414:	80 e7       	ldi	r24, 0x70	; 112
 416:	80 93 8a 00 	sts	0x008A, r24
	  nrf_send_config(4);
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	49 df       	rcall	.-366    	; 0x2b0 <nrf_send_config>
      if (aux);
      //nrf_ce = true;                          // returns as receiver.  
	  NRF_CE_high();
 41e:	95 9a       	sbi	0x12, 5	; 18
  return;	
}
 420:	08 95       	ret

00000422 <nrf_tx_mode>:
//////////////////////////////////////////////////////////////
// Program the nRF in transmit mode
//////////////////////////////////////////////////////////////
void nrf_tx_mode(){

  nrf_conf.config_addr = NRF_CONFIG;        // 0x00 (address).
 422:	10 92 7b 00 	sts	0x007B, r1
	nrf_conf.write_reg = NRF_W_REG;
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	80 93 ac 00 	sts	0x00AC, r24
	nrf_conf.txrx = NRF_TX;
 42c:	10 92 ab 00 	sts	0x00AB, r1
  nrf_conf.pw_up = NRF_PWR_UP;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	80 93 ad 00 	sts	0x00AD, r24
	nrf_send_config(2);
 436:	3c df       	rcall	.-392    	; 0x2b0 <nrf_send_config>

  //nrf_ce = 0;                               // enable transmition.
  NRF_CE_low();
 438:	95 98       	cbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43a:	8a e1       	ldi	r24, 0x1A	; 26
 43c:	8a 95       	dec	r24
 43e:	f1 f7       	brne	.-4      	; 0x43c <nrf_tx_mode+0x1a>
 440:	00 c0       	rjmp	.+0      	; 0x442 <nrf_tx_mode+0x20>
  //delay_us(10);
  _delay_us(10);
 return;	
}
 442:	08 95       	ret

00000444 <nrf_rx_mode>:
//////////////////////////////////////////////////////////////
// Program the nRF in receive mode 
//////////////////////////////////////////////////////////////
void nrf_rx_mode(){

  nrf_conf.config_addr = NRF_CONFIG;        // 0x00 (address).
 444:	10 92 7b 00 	sts	0x007B, r1
	nrf_conf.write_reg = NRF_W_REG;
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	80 93 ac 00 	sts	0x00AC, r24
	nrf_conf.txrx = NRF_RX;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 ab 00 	sts	0x00AB, r24
  nrf_conf.pw_up = NRF_PWR_UP;
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	80 93 ad 00 	sts	0x00AD, r24
	nrf_send_config(3);
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	29 df       	rcall	.-430    	; 0x2b0 <nrf_send_config>
	
	//nrf_ce = 1;                     	        // enable reception.
	NRF_CE_high();
 45e:	95 9a       	sbi	0x12, 5	; 18
 460:	8a e1       	ldi	r24, 0x1A	; 26
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__stack+0x9>
//  delay_us(10);
_delay_us(10);
 return;	
}
 468:	08 95       	ret

0000046a <nrf_basic_config>:
// Change parameters like channel and datawidth here
//////////////////////////////////////////////////////////////
void nrf_basic_config() {

	// Program the settings for the nrf
	nrf_conf.config_addr    = NRF_CONFIG;     // 0x00.
 46a:	10 92 7b 00 	sts	0x007B, r1
  nrf_conf.config         = CONFIG_DEF;     // 00001000b (default)
 46e:	88 e0       	ldi	r24, 0x08	; 8
 470:	80 93 7c 00 	sts	0x007C, r24
  nrf_conf.en_aa_addr     = NRF_EN_AA;      // 0x01.
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	80 93 7d 00 	sts	0x007D, r24
  nrf_conf.en_aa          = EN_AA_DEF;      // 00111111b (default)
 47a:	10 92 7e 00 	sts	0x007E, r1
  nrf_conf.en_rxaddr_addr = NRF_EN_RXADDR;  // 0x02.
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	80 93 7f 00 	sts	0x007F, r24
  nrf_conf.en_rxaddr      = EN_RXADDR_DEF;  // 00000011b (default)
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	80 93 80 00 	sts	0x0080, r24
  nrf_conf.setup_aw_addr  = NRF_SETUP_AW;   // 0x03.
 48a:	80 93 81 00 	sts	0x0081, r24
  nrf_conf.setup_aw       = SETUP_AW_DEF;   // 00000011b (default)
 48e:	80 93 82 00 	sts	0x0082, r24
  nrf_conf.setup_ptr_addr = NRF_SETUP_RTR ; // 0x04.
 492:	94 e0       	ldi	r25, 0x04	; 4
 494:	90 93 83 00 	sts	0x0083, r25
  nrf_conf.setup_ptr      = SETUP_RTR_DEF;  // 00000011b (default)
 498:	80 93 84 00 	sts	0x0084, r24
  nrf_conf.rf_channel_addr= NRF_CHANNEL;    // 0x05.
 49c:	95 e0       	ldi	r25, 0x05	; 5
 49e:	90 93 85 00 	sts	0x0085, r25
  nrf_conf.rf_channel     = CHANNEL_DEF;    // 00000010b (default)
 4a2:	9c e0       	ldi	r25, 0x0C	; 12
 4a4:	90 93 86 00 	sts	0x0086, r25
  nrf_conf.rf_setup_addr  = NRF_RF_SETUP;   // 0x06.
 4a8:	96 e0       	ldi	r25, 0x06	; 6
 4aa:	90 93 87 00 	sts	0x0087, r25
  nrf_conf.rf_setup       = RF_SETUP_DEF;   // 00001111b (default)
 4ae:	97 e0       	ldi	r25, 0x07	; 7
 4b0:	90 93 88 00 	sts	0x0088, r25
 
  nrf_conf.rx_addr_p0_addr= NRF_RX_ADDR_P0; // 0x0A - 0xF  writes 6 times to the
 4b4:	9a e0       	ldi	r25, 0x0A	; 10
 4b6:	90 93 8f 00 	sts	0x008F, r25
  nrf_conf.rx_addr_p0     = RX_ADDR_P0_DEF; // same address to increase the pointer.  
 4ba:	97 ee       	ldi	r25, 0xE7	; 231
 4bc:	90 93 90 00 	sts	0x0090, r25
  nrf_conf.rx_addr_p1_addr= NRF_RX_ADDR_P1; // 0x0B - 0xF  writes 6 times to the
 4c0:	2b e0       	ldi	r18, 0x0B	; 11
 4c2:	20 93 91 00 	sts	0x0091, r18
  nrf_conf.rx_addr_p1     = RX_ADDR_P1_DEF; // same address to increase the pointer. 
 4c6:	22 ec       	ldi	r18, 0xC2	; 194
 4c8:	20 93 92 00 	sts	0x0092, r18
                                            // 0x0C -0x0F not sent (no use in his project)
  nrf_conf.tx_addr_addr   = NRF_TX_ADDR;    // 0x10
 4cc:	20 e1       	ldi	r18, 0x10	; 16
 4ce:	20 93 9b 00 	sts	0x009B, r18
  nrf_conf.tx_addr        = TX_DEF;         // 00000000b; (addr. 0x10)
 4d2:	90 93 9c 00 	sts	0x009C, r25

  nrf_conf.rx_pw_p0_addr  = NRF_RX_PW_P0;   // 0x11     
 4d6:	91 e1       	ldi	r25, 0x11	; 17
 4d8:	90 93 9d 00 	sts	0x009D, r25
  nrf_conf.rx_pw_p0       = RX_PW_P0_DEF;   // 00000010b (sets payload to 2 bytes, default = 0x00)
 4dc:	80 93 9e 00 	sts	0x009E, r24
  nrf_conf.rx_pw_p1_addr  = NRF_RX_PW_P1;   // 0x12
 4e0:	82 e1       	ldi	r24, 0x12	; 18
 4e2:	80 93 9f 00 	sts	0x009F, r24
  nrf_conf.rx_pw_p1       = RX_PW_P1_DEF;   // 00000010b (sets payload to 2 bytes, default = 0x00)
 4e6:	10 92 a0 00 	sts	0x00A0, r1
  nrf_conf.rx_pw_p2_addr  = NRF_RX_PW_P2;   // 0x13
 4ea:	83 e1       	ldi	r24, 0x13	; 19
 4ec:	80 93 a1 00 	sts	0x00A1, r24
  nrf_conf.rx_pw_p2       = RX_PW_P2_DEF;   // 00000000b (default)
 4f0:	10 92 a2 00 	sts	0x00A2, r1
  nrf_conf.rx_pw_p3_addr  = NRF_RX_PW_P3;   // 0x14
 4f4:	84 e1       	ldi	r24, 0x14	; 20
 4f6:	80 93 a3 00 	sts	0x00A3, r24
  nrf_conf.rx_pw_p3       = RX_PW_P3_DEF;   // 00000000b (default)
 4fa:	10 92 a4 00 	sts	0x00A4, r1
  nrf_conf.rx_pw_p4_addr  = NRF_RX_PW_P4;   // 0x15
 4fe:	85 e1       	ldi	r24, 0x15	; 21
 500:	80 93 a5 00 	sts	0x00A5, r24
  nrf_conf.rx_pw_p4       = RX_PW_P4_DEF;   // 00000000b (default)
 504:	10 92 a6 00 	sts	0x00A6, r1
  nrf_conf.rx_pw_p5_addr  = NRF_RX_PW_P5;   // 0x16
 508:	86 e1       	ldi	r24, 0x16	; 22
 50a:	80 93 a7 00 	sts	0x00A7, r24
  nrf_conf.rx_pw_p5       = RX_PW_P5_DEF;   // 00000000b (default)
 50e:	10 92 a8 00 	sts	0x00A8, r1

	nrf_conf.write_reg      = NRF_W_REG ;     // 00100000b  // 000A AAAA.
 512:	80 e2       	ldi	r24, 0x20	; 32
 514:	80 93 ac 00 	sts	0x00AC, r24

 	nrf_send_config(1);                       // configure the device.
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	ca de       	rcall	.-620    	; 0x2b0 <nrf_send_config>
return;
	
}
 51c:	08 95       	ret

0000051e <nrf_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51e:	8f e6       	ldi	r24, 0x6F	; 111
 520:	97 e1       	ldi	r25, 0x17	; 23
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <nrf_init+0x4>
 526:	00 c0       	rjmp	.+0      	; 0x528 <nrf_init+0xa>
 528:	00 00       	nop
void nrf_init() {

	  //delay_ms(3);
	  _delay_ms(3);

	  spi_init();                 // Init the SPI interface, enables INTCON, 6,7.
 52a:	43 d0       	rcall	.+134    	; 0x5b2 <spi_init>
	
	  //nrf_ce = 0;                 // RC,Pin35: CE 0 = transmitter, CE 1 = receiver.
	  NRF_CE_low();
 52c:	95 98       	cbi	0x12, 5	; 18
	  //nrf_cs = 1;                 // RC,Pin36: nRF24L01 desactivated.     
	  NRF_CS_high();
 52e:	94 9a       	sbi	0x12, 4	; 18

	  nrf_basic_config();
 530:	9c df       	rcall	.-200    	; 0x46a <nrf_basic_config>
	
	return;
}
 532:	08 95       	ret

00000534 <nrf_read_fifo>:
//
////////////////////////////////////////////////////////////////////////

void nrf_read_fifo(){
   //nrf_ce = 0; 
   NRF_CE_low();
 534:	95 98       	cbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	8a e1       	ldi	r24, 0x1A	; 26
 538:	8a 95       	dec	r24
 53a:	f1 f7       	brne	.-4      	; 0x538 <nrf_read_fifo+0x4>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <nrf_read_fifo+0xa>
   //delay_us(10);
   _delay_us(10);
   char flag = 1;

    nrf_conf.w_rx_payload = R_RX_PAYLOAD;           // loads 0x61, payload address.   
 53e:	81 e6       	ldi	r24, 0x61	; 97
 540:	80 93 b0 00 	sts	0x00B0, r24
    nrf_conf.incoming = 0x00;                       // send 0x00 te get byte from rxpayload.  
 544:	10 92 b2 00 	sts	0x00B2, r1
    spi_load_byte(nrf_conf.w_rx_payload);           // addr: 0xA0.
 548:	43 d0       	rcall	.+134    	; 0x5d0 <spi_load_byte>
	  spi_load_byte(nrf_conf.incoming);               // dummy bytes.
 54a:	80 91 b2 00 	lds	r24, 0x00B2
 54e:	40 d0       	rcall	.+128    	; 0x5d0 <spi_load_byte>
    spi_load_byte(nrf_conf.incoming);               // dummy bytes.
 550:	80 91 b2 00 	lds	r24, 0x00B2
 554:	3d d0       	rcall	.+122    	; 0x5d0 <spi_load_byte>
    spi_load_byte(nrf_conf.incoming);               // dummy bytes.   
 556:	80 91 b2 00 	lds	r24, 0x00B2
 55a:	3a d0       	rcall	.+116    	; 0x5d0 <spi_load_byte>

    spi_exchange(flag);                             // send configuration bytes.
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	52 d0       	rcall	.+164    	; 0x604 <spi_exchange>
    flag = 0;
    //nrf_ce = 1;
	NRF_CE_high();
 560:	95 9a       	sbi	0x12, 5	; 18
 }
 562:	08 95       	ret

00000564 <nrf_get_byte>:
//
///////////////////////////////////////////////////////////////////////
unsigned char nrf_get_byte(char count){

   unsigned char data_ret;
   data_ret = spi_get_byte(count);
 564:	9d d0       	rcall	.+314    	; 0x6a0 <spi_get_byte>

  return data_ret;
}
 566:	08 95       	ret

00000568 <nrf_put_byte>:
void nrf_put_byte(){

    unsigned char load_byte;
    char flag = 1;

    nrf_conf.w_tx_payload = W_TX_PAYLOAD;       // loads 0xA0, payload address.
 568:	80 ea       	ldi	r24, 0xA0	; 160
 56a:	80 93 af 00 	sts	0x00AF, r24
      
	  spi_init_buffer();                          // pointer to 0;
 56e:	2d d0       	rcall	.+90     	; 0x5ca <spi_init_buffer>

      spi_load_byte(nrf_conf.w_tx_payload);     // addr: 0xA0.
 570:	80 91 af 00 	lds	r24, 0x00AF
 574:	2d d0       	rcall	.+90     	; 0x5d0 <spi_load_byte>
	  spi_load_byte(load_byte = 'A'); // 
 576:	81 e4       	ldi	r24, 0x41	; 65
 578:	2b d0       	rcall	.+86     	; 0x5d0 <spi_load_byte>
      spi_load_byte(load_byte = 'B'); // 
 57a:	82 e4       	ldi	r24, 0x42	; 66
 57c:	29 d0       	rcall	.+82     	; 0x5d0 <spi_load_byte>
      spi_load_byte(load_byte = 'C'); // 
 57e:	83 e4       	ldi	r24, 0x43	; 67
 580:	27 d0       	rcall	.+78     	; 0x5d0 <spi_load_byte>

    spi_exchange(flag);                         // send configuration bytes.
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	3f d0       	rcall	.+126    	; 0x604 <spi_exchange>
    flag = 0;
 	  //nrf_ce = 1;                                 // toggle CE for 10us to send the data.
	   NRF_CE_high();
 586:	95 9a       	sbi	0x12, 5	; 18
 588:	8a e1       	ldi	r24, 0x1A	; 26
 58a:	8a 95       	dec	r24
 58c:	f1 f7       	brne	.-4      	; 0x58a <nrf_put_byte+0x22>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <nrf_put_byte+0x28>
    //delay_ms(1);                                // should work with 10us.
	_delay_us(10);                                
  	//nrf_ce = 0; 
	  NRF_CE_low();
 590:	95 98       	cbi	0x12, 5	; 18
}
 592:	08 95       	ret

00000594 <send_byte>:
//
//
void send_byte(){

 	  //nrf_ce = 1;                                 // toggle CE for 10us to send the data.
	   NRF_CE_high();
 594:	95 9a       	sbi	0x12, 5	; 18
 596:	8a e1       	ldi	r24, 0x1A	; 26
 598:	8a 95       	dec	r24
 59a:	f1 f7       	brne	.-4      	; 0x598 <send_byte+0x4>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <send_byte+0xa>
    //delay_ms(1);                                // should work with 10us.
	_delay_us(10);
  	//nrf_ce = 0; 
	  NRF_CE_low();
 59e:	95 98       	cbi	0x12, 5	; 18
 }
 5a0:	08 95       	ret

000005a2 <nrf_irq_jack>:
//

char nrf_irq_jack()                             // something happend?
  {
    if (NRF_IRQ_read)
    return true;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	83 9b       	sbis	0x10, 3	; 16
 5a6:	80 e0       	ldi	r24, 0x00	; 0
    else
    return false;                               // IRQ active(low), data has been sent/received.
  }
 5a8:	08 95       	ret

000005aa <main>:
#include "charlie.h"


int main(void)
	{
	setup_charlie();
 5aa:	ea dd       	rcall	.-1068   	; 0x180 <setup_charlie>
	sei(); //global interrupt enable
 5ac:	78 94       	sei
	while (1)
		{
		roll_charlie();
 5ae:	57 de       	rcall	.-850    	; 0x25e <roll_charlie>
 5b0:	fe cf       	rjmp	.-4      	; 0x5ae <main+0x4>

000005b2 <spi_init>:
	spi_do_tris  = 0;
	spi_cs_tris  = 0;
	spi_ce_tris  = 0;
	*/

	SPI_SCK_DDR|=(1<<SPI_SCK_BV);
 5b2:	bd 9a       	sbi	0x17, 5	; 23
	SPI_MOSI_DDR|=(1<<SPI_MOSI_BV);
 5b4:	bb 9a       	sbi	0x17, 3	; 23
	SPI_CS_DDR|=(1<<SPI_MISO_BV);
 5b6:	8c 9a       	sbi	0x11, 4	; 17
	SPI_CE_DDR|=(1<<SPI_CE_BV);
 5b8:	8d 9a       	sbi	0x11, 5	; 17
	// inputs
	/*
	spi_di_tris  = 1;
  spi_irq_tris = 1;
	*/
	SPI_MOSI_DDR &= ~(1<<SPI_MOSI_BV);
 5ba:	bb 98       	cbi	0x17, 3	; 23
	SPI_IRQ_DDR &= ~(1<<SPI_IRQ_BV);
 5bc:	8b 98       	cbi	0x11, 3	; 17
	
	
SPSR |= (1<<SPI2X);				      //double speed
 5be:	70 9a       	sbi	0x0e, 0	; 14
SPCR = (1<<SPE)|(1<<MSTR);			  //Enable SPI, Master, set clock rate fck/2
 5c0:	80 e5       	ldi	r24, 0x50	; 80
 5c2:	8d b9       	out	0x0d, r24	; 13
#endif // PIC18_SPI1

	clear_bit(pir1, SSPIF);		// clear interrupt flag.
	set_bit(pie1, SSPIE);		  // enable interrupt flag.
*/	
	spi_pointer = 0;          // init the buffer pointer.
 5c4:	10 92 63 00 	sts	0x0063, r1
	
}
 5c8:	08 95       	ret

000005ca <spi_init_buffer>:

//////////////////////////////////////////////////////////////////////
// Init the databuffer of the SPI code
//////////////////////////////////////////////////////////////////////
void spi_init_buffer(){
	spi_pointer = 0;
 5ca:	10 92 63 00 	sts	0x0063, r1
	return;
}
 5ce:	08 95       	ret

000005d0 <spi_load_byte>:

//////////////////////////////////////////////////////////////////////
// Add a byte to the SPI TX buffer
//////////////////////////////////////////////////////////////////////
void spi_load_byte(char input){
	spi_data_buffer[spi_pointer] = input;
 5d0:	90 91 63 00 	lds	r25, 0x0063
 5d4:	e6 eb       	ldi	r30, 0xB6	; 182
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	e9 0f       	add	r30, r25
 5da:	f1 1d       	adc	r31, r1
 5dc:	80 83       	st	Z, r24
	spi_pointer++;
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	90 93 63 00 	sts	0x0063, r25
}
 5e4:	08 95       	ret

000005e6 <spi_Read_Write>:
//

unsigned char spi_Read_Write(unsigned char byte)
{
  //sspbuf = byte;
  SPDR = byte;
 5e6:	8f b9       	out	0x0f, r24	; 15
  while(!(SPSR & (1<<SPIF))); //wait for empty transmit buffer
 5e8:	77 9b       	sbis	0x0e, 7	; 14
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <spi_Read_Write+0x2>
  //while (!test_bit (sspstat,0));                                      // waits for byte sent.
  spi_pointer++;
 5ec:	80 91 63 00 	lds	r24, 0x0063
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	80 93 63 00 	sts	0x0063, r24
  spi_counter--;
 5f6:	80 91 62 00 	lds	r24, 0x0062
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	80 93 62 00 	sts	0x0062, r24
  //return sspbuf;
  return SPDR;
 600:	8f b1       	in	r24, 0x0f	; 15
}
 602:	08 95       	ret

00000604 <spi_exchange>:
//

//////////////////////////////////////////////////////////////////////
// Initiate an SPI transaction
//////////////////////////////////////////////////////////////////////
void spi_exchange(char sw){
 604:	af 92       	push	r10
 606:	bf 92       	push	r11
 608:	cf 92       	push	r12
 60a:	df 92       	push	r13
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	f8 2e       	mov	r15, r24

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
 61a:	80 91 63 00 	lds	r24, 0x0063
 61e:	80 93 62 00 	sts	0x0062, r24
  spi_pointer = 0x00;
 622:	10 92 63 00 	sts	0x0063, r1
//////////////////////////////////////////////////////////////////////
// Initiate an SPI transaction
//////////////////////////////////////////////////////////////////////
void spi_exchange(char sw){

	uint8_t flag = 0x00; 
 626:	ee 24       	eor	r14, r14
    //spi_cs = 0;          
	SPI_CS_low();
    //delay_us(10);                                                     // aprox.10us.
	_delay_us(10);

    data[spi_pointer] = spi_Read_Write(spi_data_buffer[spi_pointer]); // 1st address, 2nd data.
 628:	06 eb       	ldi	r16, 0xB6	; 182
 62a:	10 e0       	ldi	r17, 0x00	; 0
 62c:	0f 2e       	mov	r0, r31
 62e:	f8 ed       	ldi	r31, 0xD8	; 216
 630:	cf 2e       	mov	r12, r31
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	df 2e       	mov	r13, r31
 636:	f0 2d       	mov	r31, r0
        flag = 0x00;
        //delay_10us(1);                                                  
		_delay_us(10);
        }
      else
        flag = ~flag;
 638:	bb 24       	eor	r11, r11
 63a:	ba 94       	dec	r11
    
    if (!sw){
      if (flag){
        //spi_cs = 1;
		SPI_CS_high();
        flag = 0x00;
 63c:	aa 24       	eor	r10, r10

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
  spi_pointer = 0x00;
  	
	while (spi_counter)
 63e:	1c c0       	rjmp	.+56     	; 0x678 <spi_exchange+0x74>
    {
    //spi_cs = 0;          
	SPI_CS_low();
 640:	94 98       	cbi	0x12, 4	; 18
 642:	8a e1       	ldi	r24, 0x1A	; 26
 644:	8a 95       	dec	r24
 646:	f1 f7       	brne	.-4      	; 0x644 <spi_exchange+0x40>
 648:	00 c0       	rjmp	.+0      	; 0x64a <spi_exchange+0x46>
    //delay_us(10);                                                     // aprox.10us.
	_delay_us(10);

    data[spi_pointer] = spi_Read_Write(spi_data_buffer[spi_pointer]); // 1st address, 2nd data.
 64a:	c0 91 63 00 	lds	r28, 0x0063
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	f8 01       	movw	r30, r16
 652:	ec 0f       	add	r30, r28
 654:	fd 1f       	adc	r31, r29
 656:	80 81       	ld	r24, Z
 658:	c6 df       	rcall	.-116    	; 0x5e6 <spi_Read_Write>
 65a:	cc 0d       	add	r28, r12
 65c:	dd 1d       	adc	r29, r13
 65e:	88 83       	st	Y, r24
    
    if (!sw){
 660:	ff 20       	and	r15, r15
 662:	51 f4       	brne	.+20     	; 0x678 <spi_exchange+0x74>
      if (flag){
 664:	ee 20       	and	r14, r14
 666:	39 f0       	breq	.+14     	; 0x676 <spi_exchange+0x72>
        //spi_cs = 1;
		SPI_CS_high();
 668:	94 9a       	sbi	0x12, 4	; 18
 66a:	8a e1       	ldi	r24, 0x1A	; 26
 66c:	8a 95       	dec	r24
 66e:	f1 f7       	brne	.-4      	; 0x66c <spi_exchange+0x68>
 670:	00 c0       	rjmp	.+0      	; 0x672 <spi_exchange+0x6e>
        flag = 0x00;
 672:	ea 2c       	mov	r14, r10
 674:	01 c0       	rjmp	.+2      	; 0x678 <spi_exchange+0x74>
        //delay_10us(1);                                                  
		_delay_us(10);
        }
      else
        flag = ~flag;
 676:	eb 2c       	mov	r14, r11

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
  spi_pointer = 0x00;
  	
	while (spi_counter)
 678:	80 91 62 00 	lds	r24, 0x0062
 67c:	88 23       	and	r24, r24
 67e:	01 f7       	brne	.-64     	; 0x640 <spi_exchange+0x3c>
        flag = ~flag;
      }
    };
    sw = 0x00;
    //spi_cs = 1; 
	SPI_CS_high();
 680:	94 9a       	sbi	0x12, 4	; 18
 682:	8a e1       	ldi	r24, 0x1A	; 26
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <spi_exchange+0x80>
 688:	00 c0       	rjmp	.+0      	; 0x68a <spi_exchange+0x86>
	SPI_CS_high();
    //delay_us(10);
	_delay_us(10);*/
 
   return;
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	bf 90       	pop	r11
 69c:	af 90       	pop	r10
 69e:	08 95       	ret

000006a0 <spi_get_byte>:

///////////////////////////////////////////////////////////////////////
// Get a byte from the spi data buffer
///////////////////////////////////////////////////////////////////////
unsigned char spi_get_byte(char count){
  spi_pointer = count;
 6a0:	80 93 63 00 	sts	0x0063, r24
	return data[spi_pointer];
 6a4:	e8 ed       	ldi	r30, 0xD8	; 216
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	e8 0f       	add	r30, r24
 6aa:	f1 1d       	adc	r31, r1
}
 6ac:	80 81       	ld	r24, Z
 6ae:	08 95       	ret

000006b0 <spi_read_reg>:
/////////////////////////////////////////////////////////////////
void spi_read_reg(char reg_addr){

  
  //spi_cs = 0;
  SPI_CS_low();
 6b0:	94 98       	cbi	0x12, 4	; 18
 6b2:	9a e1       	ldi	r25, 0x1A	; 26
 6b4:	9a 95       	dec	r25
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <spi_read_reg+0x4>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <spi_read_reg+0xa>
    //delay_us(10);                                          // aprox.10us.
	_delay_us(10);
    statusReg = spi_Read_Write(reg_addr);                  // change REGISTER.
 6ba:	95 df       	rcall	.-214    	; 0x5e6 <spi_Read_Write>
 6bc:	80 93 b5 00 	sts	0x00B5, r24
    data[0]   = spi_Read_Write(0x00);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	91 df       	rcall	.-222    	; 0x5e6 <spi_Read_Write>
 6c4:	80 93 d8 00 	sts	0x00D8, r24
    data[1]   = spi_Read_Write(0x00);
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	8d df       	rcall	.-230    	; 0x5e6 <spi_Read_Write>
 6cc:	80 93 d9 00 	sts	0x00D9, r24
    data[2]   = spi_Read_Write(0x00);
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	89 df       	rcall	.-238    	; 0x5e6 <spi_Read_Write>
 6d4:	80 93 da 00 	sts	0x00DA, r24
    data[3]   = spi_Read_Write(0x00);
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	85 df       	rcall	.-246    	; 0x5e6 <spi_Read_Write>
 6dc:	80 93 db 00 	sts	0x00DB, r24
    data[4]   = spi_Read_Write(0x00);
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	81 df       	rcall	.-254    	; 0x5e6 <spi_Read_Write>
 6e4:	80 93 dc 00 	sts	0x00DC, r24
    data[5]   = spi_Read_Write(0x00);
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	7d df       	rcall	.-262    	; 0x5e6 <spi_Read_Write>
 6ec:	80 93 dd 00 	sts	0x00DD, r24
 
    spi_init_buffer();                                      // set pointer 0.
 6f0:	6c df       	rcall	.-296    	; 0x5ca <spi_init_buffer>
    //spi_cs = 1; 
	SPI_CS_high();
 6f2:	94 9a       	sbi	0x12, 4	; 18
}
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
