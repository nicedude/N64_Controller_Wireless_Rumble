
NRF_N64_Basestation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009a  00800060  00800060  000006f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001433  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000765  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000090f  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  0000345c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005fb  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000653  00000000  00000000  00003cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  0000431a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__bad_interrupt>
   4:	2c c0       	rjmp	.+88     	; 0x5e <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__bad_interrupt>
   8:	2a c0       	rjmp	.+84     	; 0x5e <__bad_interrupt>
   a:	29 c0       	rjmp	.+82     	; 0x5e <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__vector_9>
  14:	24 c0       	rjmp	.+72     	; 0x5e <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__bad_interrupt>
  18:	22 c0       	rjmp	.+68     	; 0x5e <__bad_interrupt>
  1a:	21 c0       	rjmp	.+66     	; 0x5e <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__bad_interrupt>
  1e:	1f c0       	rjmp	.+62     	; 0x5e <__bad_interrupt>
  20:	1e c0       	rjmp	.+60     	; 0x5e <__bad_interrupt>
  22:	1d c0       	rjmp	.+58     	; 0x5e <__bad_interrupt>
  24:	1c c0       	rjmp	.+56     	; 0x5e <__bad_interrupt>
  26:	02 c1       	rjmp	.+516    	; 0x22c <set_charlie+0xac>
  28:	fa c0       	rjmp	.+500    	; 0x21e <set_charlie+0x9e>
  2a:	f2 c0       	rjmp	.+484    	; 0x210 <set_charlie+0x90>
  2c:	ea c0       	rjmp	.+468    	; 0x202 <set_charlie+0x82>
  2e:	e2 c0       	rjmp	.+452    	; 0x1f4 <set_charlie+0x74>
  30:	da c0       	rjmp	.+436    	; 0x1e6 <set_charlie+0x66>
  32:	d2 c0       	rjmp	.+420    	; 0x1d8 <set_charlie+0x58>
  34:	ca c0       	rjmp	.+404    	; 0x1ca <set_charlie+0x4a>
  36:	c2 c0       	rjmp	.+388    	; 0x1bc <set_charlie+0x3c>
  38:	ba c0       	rjmp	.+372    	; 0x1ae <set_charlie+0x2e>
  3a:	b2 c0       	rjmp	.+356    	; 0x1a0 <set_charlie+0x20>
  3c:	aa c0       	rjmp	.+340    	; 0x192 <set_charlie+0x12>

0000003e <__ctors_end>:
  3e:	11 24       	eor	r1, r1
  40:	1f be       	out	0x3f, r1	; 63
  42:	cf e5       	ldi	r28, 0x5F	; 95
  44:	d4 e0       	ldi	r29, 0x04	; 4
  46:	de bf       	out	0x3e, r29	; 62
  48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	a0 e6       	ldi	r26, 0x60	; 96
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	aa 3f       	cpi	r26, 0xFA	; 250
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>
  5a:	75 d2       	rcall	.+1258   	; 0x546 <main>
  5c:	01 c3       	rjmp	.+1538   	; 0x660 <_exit>

0000005e <__bad_interrupt>:
  5e:	d0 cf       	rjmp	.-96     	; 0x0 <__vectors>

00000060 <__vector_9>:
uint16_t LED_PATTERN;
uint8_t ovf_count=0;
uint8_t charlie_counter=0;

ISR (TIMER0_OVF_vect) //runs at 1MHz/256 = 3906,25Hz
{
  60:	1f 92       	push	r1
  62:	0f 92       	push	r0
  64:	0f b6       	in	r0, 0x3f	; 63
  66:	0f 92       	push	r0
  68:	11 24       	eor	r1, r1
  6a:	2f 93       	push	r18
  6c:	3f 93       	push	r19
  6e:	4f 93       	push	r20
  70:	5f 93       	push	r21
  72:	8f 93       	push	r24
  74:	9f 93       	push	r25
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
	ovf_count++;
  7a:	80 91 61 00 	lds	r24, 0x0061
  7e:	8f 5f       	subi	r24, 0xFF	; 255
	if (ovf_count<32) return;	//half the frq: 1953,125Hz - period= 512µS
  80:	80 32       	cpi	r24, 0x20	; 32
  82:	18 f4       	brcc	.+6      	; 0x8a <__vector_9+0x2a>
uint8_t ovf_count=0;
uint8_t charlie_counter=0;

ISR (TIMER0_OVF_vect) //runs at 1MHz/256 = 3906,25Hz
{
	ovf_count++;
  84:	80 93 61 00 	sts	0x0061, r24
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__vector_9+0x86>
	if (ovf_count<32) return;	//half the frq: 1953,125Hz - period= 512µS
	ovf_count=0;
  8a:	10 92 61 00 	sts	0x0061, r1
	
	PORTC=0;
  8e:	15 ba       	out	0x15, r1	; 21
	if (LED_PATTERN & (1<<charlie_counter))
  90:	20 91 60 00 	lds	r18, 0x0060
  94:	42 2f       	mov	r20, r18
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__vector_9+0x42>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	2a 95       	dec	r18
  a4:	e2 f7       	brpl	.-8      	; 0x9e <__vector_9+0x3e>
  a6:	20 91 78 00 	lds	r18, 0x0078
  aa:	30 91 79 00 	lds	r19, 0x0079
  ae:	82 23       	and	r24, r18
  b0:	93 23       	and	r25, r19
  b2:	89 2b       	or	r24, r25
  b4:	71 f0       	breq	.+28     	; 0xd2 <__vector_9+0x72>
	{
		DDRC=charlie.LEDS[charlie_counter].DDRS;
  b6:	fa 01       	movw	r30, r20
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ec 59       	subi	r30, 0x9C	; 156
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 81       	ld	r24, Z
  c2:	84 bb       	out	0x14, r24	; 20
		PORTC=charlie.LEDS[charlie_counter].PORT;
  c4:	fa 01       	movw	r30, r20
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	ec 59       	subi	r30, 0x9C	; 156
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	85 bb       	out	0x15, r24	; 21
	}
	charlie_counter++;
  d2:	80 91 60 00 	lds	r24, 0x0060
  d6:	8f 5f       	subi	r24, 0xFF	; 255
	if (charlie_counter>9) charlie_counter=0;
  d8:	8a 30       	cpi	r24, 0x0A	; 10
  da:	18 f4       	brcc	.+6      	; 0xe2 <__vector_9+0x82>
	if (LED_PATTERN & (1<<charlie_counter))
	{
		DDRC=charlie.LEDS[charlie_counter].DDRS;
		PORTC=charlie.LEDS[charlie_counter].PORT;
	}
	charlie_counter++;
  dc:	80 93 60 00 	sts	0x0060, r24
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__vector_9+0x86>
	if (charlie_counter>9) charlie_counter=0;
  e2:	10 92 60 00 	sts	0x0060, r1
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <setup_charlie_struct>:
	//setup bit patterns for DDRs and output pins.
	
	//PB4 and PB5 are input.
	
	//HLZZ:
	charlie.LEDS[0].DDRS=0b001100;
 100:	2c e0       	ldi	r18, 0x0C	; 12
 102:	20 93 64 00 	sts	0x0064, r18
	charlie.LEDS[0].PORT=0b1000;
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	80 93 65 00 	sts	0x0065, r24
	//ZHZL:
	charlie.LEDS[1].DDRS=0b000101;
 10c:	95 e0       	ldi	r25, 0x05	; 5
 10e:	90 93 66 00 	sts	0x0066, r25
	charlie.LEDS[1].PORT=0b0100;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 67 00 	sts	0x0067, r24
	//ZHLZ:
	charlie.LEDS[2].DDRS=0b000110;
 118:	36 e0       	ldi	r19, 0x06	; 6
 11a:	30 93 68 00 	sts	0x0068, r19
	charlie.LEDS[2].PORT=0b0100;
 11e:	80 93 69 00 	sts	0x0069, r24
	//LHZZ:
	charlie.LEDS[3].DDRS=0b001100;
 122:	20 93 6a 00 	sts	0x006A, r18
	charlie.LEDS[3].PORT=0b0100;
 126:	80 93 6b 00 	sts	0x006B, r24
	//ZZHL:
	charlie.LEDS[4].DDRS=0b000011;
 12a:	23 e0       	ldi	r18, 0x03	; 3
 12c:	20 93 6c 00 	sts	0x006C, r18
	charlie.LEDS[4].PORT=0b0010;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 6d 00 	sts	0x006D, r24
	//ZLHZ:
	charlie.LEDS[5].DDRS=0b000110;
 136:	30 93 6e 00 	sts	0x006E, r19
	charlie.LEDS[5].PORT=0b0010;
 13a:	80 93 6f 00 	sts	0x006F, r24
	//LZHZ:
	charlie.LEDS[6].DDRS=0b001010;
 13e:	3a e0       	ldi	r19, 0x0A	; 10
 140:	30 93 70 00 	sts	0x0070, r19
	charlie.LEDS[6].PORT=0b0010;
 144:	80 93 71 00 	sts	0x0071, r24
	//ZZLH:
	charlie.LEDS[7].DDRS=0b000011;
 148:	20 93 72 00 	sts	0x0072, r18
	charlie.LEDS[7].PORT=0b000001;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 73 00 	sts	0x0073, r24
	//ZLZH:
	charlie.LEDS[8].DDRS=0b000101;
 152:	90 93 74 00 	sts	0x0074, r25
	charlie.LEDS[8].PORT=0b0001;
 156:	80 93 75 00 	sts	0x0075, r24
	//LZZH:
	charlie.LEDS[9].DDRS=0b001001;
 15a:	99 e0       	ldi	r25, 0x09	; 9
 15c:	90 93 76 00 	sts	0x0076, r25
	charlie.LEDS[9].PORT=0b0001;
 160:	80 93 77 00 	sts	0x0077, r24
 164:	08 95       	ret

00000166 <setup_charlie>:
}


void setup_charlie(void)
{
	setup_charlie_struct();
 166:	cc df       	rcall	.-104    	; 0x100 <setup_charlie_struct>
	
	
	//SET THE APPROPRIATE FREQUENCY:
	
	
	DDRC=0; //input all the things!
 168:	14 ba       	out	0x14, r1	; 20
	PORTC=0;
 16a:	15 ba       	out	0x15, r1	; 21
	MCUCR&=~(1<<PUD);
 16c:	85 b7       	in	r24, 0x35	; 53
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	85 bf       	out	0x35, r24	; 53
	
	//timer0 set up to interrupt on overflow @ 1MHz/8/256 = 488,28125Hz
	TCCR0|=(1<<CS00); //prescaler to /1
 172:	83 b7       	in	r24, 0x33	; 51
 174:	81 60       	ori	r24, 0x01	; 1
 176:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0); //Overflow interrupt enabled
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	89 bf       	out	0x39, r24	; 57
 17e:	08 95       	ret

00000180 <set_charlie>:
}


void set_charlie(uint8_t charlieVal)
{
	switch (charlieVal)
 180:	e8 2f       	mov	r30, r24
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	ec 30       	cpi	r30, 0x0C	; 12
 186:	f1 05       	cpc	r31, r1
 188:	08 f0       	brcs	.+2      	; 0x18c <set_charlie+0xc>
 18a:	55 c0       	rjmp	.+170    	; 0x236 <set_charlie+0xb6>
 18c:	ed 5e       	subi	r30, 0xED	; 237
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	09 94       	ijmp
	{
		case 11: //one louder.
		LED_PATTERN = 0xAAA;
 192:	8a ea       	ldi	r24, 0xAA	; 170
 194:	9a e0       	ldi	r25, 0x0A	; 10
 196:	90 93 79 00 	sts	0x0079, r25
 19a:	80 93 78 00 	sts	0x0078, r24
		break;
 19e:	08 95       	ret
		case 10:
		LED_PATTERN = 0b1111111111;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	93 e0       	ldi	r25, 0x03	; 3
 1a4:	90 93 79 00 	sts	0x0079, r25
 1a8:	80 93 78 00 	sts	0x0078, r24
		break;
 1ac:	08 95       	ret
		case 9:
		LED_PATTERN = 0b0111111111;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	90 93 79 00 	sts	0x0079, r25
 1b6:	80 93 78 00 	sts	0x0078, r24
		break;
 1ba:	08 95       	ret
		case 8:
		LED_PATTERN = 0b0011111111;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 79 00 	sts	0x0079, r25
 1c4:	80 93 78 00 	sts	0x0078, r24
		break;
 1c8:	08 95       	ret
		case 7:
		LED_PATTERN = 0b0001111111;
 1ca:	8f e7       	ldi	r24, 0x7F	; 127
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 79 00 	sts	0x0079, r25
 1d2:	80 93 78 00 	sts	0x0078, r24
		break;
 1d6:	08 95       	ret
		case 6:
		LED_PATTERN = 0b0000111111;
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 79 00 	sts	0x0079, r25
 1e0:	80 93 78 00 	sts	0x0078, r24
		break;
 1e4:	08 95       	ret
		case 5:
		LED_PATTERN = 0b0000011111;
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 79 00 	sts	0x0079, r25
 1ee:	80 93 78 00 	sts	0x0078, r24
		break;
 1f2:	08 95       	ret
		case 4:
		LED_PATTERN = 0b0000001111;
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 79 00 	sts	0x0079, r25
 1fc:	80 93 78 00 	sts	0x0078, r24
		break;
 200:	08 95       	ret
		case 3:
		LED_PATTERN = 0b0000000111;
 202:	87 e0       	ldi	r24, 0x07	; 7
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 79 00 	sts	0x0079, r25
 20a:	80 93 78 00 	sts	0x0078, r24
		break;
 20e:	08 95       	ret
		case 2:
		LED_PATTERN = 0b0000000011;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 79 00 	sts	0x0079, r25
 218:	80 93 78 00 	sts	0x0078, r24
		break;
 21c:	08 95       	ret
		case 1:
		LED_PATTERN = 0b0000000001;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 79 00 	sts	0x0079, r25
 226:	80 93 78 00 	sts	0x0078, r24
		break;
 22a:	08 95       	ret
		case 0:
		LED_PATTERN = 0b0000000000;
 22c:	10 92 79 00 	sts	0x0079, r1
 230:	10 92 78 00 	sts	0x0078, r1
		break;
 234:	08 95       	ret
		default:
		LED_PATTERN = 0b0101010101;
 236:	85 e5       	ldi	r24, 0x55	; 85
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 79 00 	sts	0x0079, r25
 23e:	80 93 78 00 	sts	0x0078, r24
 242:	08 95       	ret

00000244 <roll_charlie>:
		break;
	}
}

void roll_charlie(void) //scroll the LED's (during reload)
{
 244:	cf 93       	push	r28
	uint8_t i;
	for (i=0;i<=10;i++)
 246:	c0 e0       	ldi	r28, 0x00	; 0
	{
		set_charlie(i);
 248:	8c 2f       	mov	r24, r28
 24a:	9a df       	rcall	.-204    	; 0x180 <set_charlie>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f e7       	ldi	r18, 0x7F	; 127
 24e:	89 ea       	ldi	r24, 0xA9	; 169
 250:	93 e0       	ldi	r25, 0x03	; 3
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <roll_charlie+0xe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <roll_charlie+0x18>
 25c:	00 00       	nop
}

void roll_charlie(void) //scroll the LED's (during reload)
{
	uint8_t i;
	for (i=0;i<=10;i++)
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	cb 30       	cpi	r28, 0x0B	; 11
 262:	91 f7       	brne	.-28     	; 0x248 <roll_charlie+0x4>
 264:	ca e0       	ldi	r28, 0x0A	; 10
		set_charlie(i);
		_delay_ms(100);
	}
	for (i=10;i>0;i--)
	{
		set_charlie(i);
 266:	8c 2f       	mov	r24, r28
 268:	8b df       	rcall	.-234    	; 0x180 <set_charlie>
 26a:	2f e7       	ldi	r18, 0x7F	; 127
 26c:	89 ea       	ldi	r24, 0xA9	; 169
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <roll_charlie+0x2c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <roll_charlie+0x36>
 27a:	00 00       	nop
	for (i=0;i<=10;i++)
	{
		set_charlie(i);
		_delay_ms(100);
	}
	for (i=10;i>0;i--)
 27c:	c1 50       	subi	r28, 0x01	; 1
 27e:	99 f7       	brne	.-26     	; 0x266 <roll_charlie+0x22>
	{
		set_charlie(i);
		_delay_ms(100);
	}
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <nrf_send_config>:

//////////////////////////////////////////////////////////////
//  Send the configuration word to the nRF
//
//////////////////////////////////////////////////////////////
void nrf_send_config(char nr_of_bytes){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29

	char helper;

	switch (nr_of_bytes) {
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	09 f4       	brne	.+2      	; 0x28e <nrf_send_config+0xa>
 28c:	8f c0       	rjmp	.+286    	; 0x3ac <nrf_send_config+0x128>
 28e:	20 f4       	brcc	.+8      	; 0x298 <nrf_send_config+0x14>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	09 f0       	breq	.+2      	; 0x296 <nrf_send_config+0x12>
 294:	b1 c0       	rjmp	.+354    	; 0x3f8 <nrf_send_config+0x174>
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <nrf_send_config+0x22>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	09 f4       	brne	.+2      	; 0x29e <nrf_send_config+0x1a>
 29c:	94 c0       	rjmp	.+296    	; 0x3c6 <nrf_send_config+0x142>
 29e:	84 30       	cpi	r24, 0x04	; 4
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <nrf_send_config+0x20>
 2a2:	aa c0       	rjmp	.+340    	; 0x3f8 <nrf_send_config+0x174>
 2a4:	a0 c0       	rjmp	.+320    	; 0x3e6 <nrf_send_config+0x162>
		case 1:
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // addr: 0x00.
 2a6:	cc ea       	ldi	r28, 0xAC	; 172
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	98 81       	ld	r25, Y
 2ac:	80 91 7b 00 	lds	r24, 0x007B
 2b0:	89 2b       	or	r24, r25
 2b2:	81 d1       	rcall	.+770    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.config);                                   // default  00010000b.
 2b4:	80 91 7c 00 	lds	r24, 0x007C
 2b8:	7e d1       	rcall	.+764    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.en_aa_addr | nrf_conf.write_reg);          // addr: 0x01.
 2ba:	98 81       	ld	r25, Y
 2bc:	80 91 7d 00 	lds	r24, 0x007D
 2c0:	89 2b       	or	r24, r25
 2c2:	79 d1       	rcall	.+754    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.en_aa);                                    // default  00111111b. // DEBUG set all to 0x00.
 2c4:	80 91 7e 00 	lds	r24, 0x007E
 2c8:	76 d1       	rcall	.+748    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.en_rxaddr_addr | nrf_conf.write_reg);      // addr: 0x02.
 2ca:	98 81       	ld	r25, Y
 2cc:	80 91 7f 00 	lds	r24, 0x007F
 2d0:	89 2b       	or	r24, r25
 2d2:	71 d1       	rcall	.+738    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.en_rxaddr);                                // default  00000011b.
 2d4:	80 91 80 00 	lds	r24, 0x0080
 2d8:	6e d1       	rcall	.+732    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_aw_addr | nrf_conf.write_reg);       // addr: 0x03.
 2da:	98 81       	ld	r25, Y
 2dc:	80 91 81 00 	lds	r24, 0x0081
 2e0:	89 2b       	or	r24, r25
 2e2:	69 d1       	rcall	.+722    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_aw);                                 // default  00000011b.
 2e4:	80 91 82 00 	lds	r24, 0x0082
 2e8:	66 d1       	rcall	.+716    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_ptr_addr | nrf_conf.write_reg);      // addr: 0x04.
 2ea:	98 81       	ld	r25, Y
 2ec:	80 91 83 00 	lds	r24, 0x0083
 2f0:	89 2b       	or	r24, r25
 2f2:	61 d1       	rcall	.+706    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.setup_ptr);                                // default  00000011b.
 2f4:	80 91 84 00 	lds	r24, 0x0084
 2f8:	5e d1       	rcall	.+700    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_channel_addr | nrf_conf.write_reg);     // addr: 0x05.
 2fa:	98 81       	ld	r25, Y
 2fc:	80 91 85 00 	lds	r24, 0x0085
 300:	89 2b       	or	r24, r25
 302:	59 d1       	rcall	.+690    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_channel);                               // default  00000011b.
 304:	80 91 86 00 	lds	r24, 0x0086
 308:	56 d1       	rcall	.+684    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_setup_addr | nrf_conf.write_reg);       // addr: 0x06.
 30a:	98 81       	ld	r25, Y
 30c:	80 91 87 00 	lds	r24, 0x0087
 310:	89 2b       	or	r24, r25
 312:	51 d1       	rcall	.+674    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rf_setup);                                 // default  00001111b.
 314:	80 91 88 00 	lds	r24, 0x0088
 318:	4e d1       	rcall	.+668    	; 0x5b6 <spi_load_byte>

      spi_load_byte(nrf_conf.rx_addr_p0_addr | nrf_conf.write_reg);     // addr: 0x0A.
 31a:	98 81       	ld	r25, Y
 31c:	80 91 8f 00 	lds	r24, 0x008F
 320:	89 2b       	or	r24, r25
 322:	49 d1       	rcall	.+658    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rx_addr_p0);                               // set to 00000010b.
 324:	80 91 90 00 	lds	r24, 0x0090
 328:	46 d1       	rcall	.+652    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_addr_p1_addr | nrf_conf.write_reg);     // addr: 0x0B.
 32a:	98 81       	ld	r25, Y
 32c:	80 91 91 00 	lds	r24, 0x0091
 330:	89 2b       	or	r24, r25
 332:	41 d1       	rcall	.+642    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.rx_addr_p1);                               // set to 00000010b.
 334:	80 91 92 00 	lds	r24, 0x0092
 338:	3e d1       	rcall	.+636    	; 0x5b6 <spi_load_byte>
                                                                        // 0X0C -0X0F no use at the moment.

			spi_load_byte(nrf_conf.tx_addr_addr | nrf_conf.write_reg);        // addr: 0x010.
 33a:	98 81       	ld	r25, Y
 33c:	80 91 9b 00 	lds	r24, 0x009B
 340:	89 2b       	or	r24, r25
 342:	39 d1       	rcall	.+626    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.tx_addr);                                  // default  00000000b.
 344:	80 91 9c 00 	lds	r24, 0x009C
 348:	36 d1       	rcall	.+620    	; 0x5b6 <spi_load_byte>

      spi_load_byte(nrf_conf.rx_pw_p0_addr | nrf_conf.write_reg);       // addr: 0x011.
 34a:	98 81       	ld	r25, Y
 34c:	80 91 9d 00 	lds	r24, 0x009D
 350:	89 2b       	or	r24, r25
 352:	31 d1       	rcall	.+610    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p0);                                 // set to  00000010b.
 354:	80 91 9e 00 	lds	r24, 0x009E
 358:	2e d1       	rcall	.+604    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p1_addr | nrf_conf.write_reg);       // addr: 0x012.
 35a:	98 81       	ld	r25, Y
 35c:	80 91 9f 00 	lds	r24, 0x009F
 360:	89 2b       	or	r24, r25
 362:	29 d1       	rcall	.+594    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p1);                                 // set to  00000010b.
 364:	80 91 a0 00 	lds	r24, 0x00A0
 368:	26 d1       	rcall	.+588    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p2_addr | nrf_conf.write_reg);       // addr: 0x013.
 36a:	98 81       	ld	r25, Y
 36c:	80 91 a1 00 	lds	r24, 0x00A1
 370:	89 2b       	or	r24, r25
 372:	21 d1       	rcall	.+578    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p2);                                 // default  00000000b.
 374:	80 91 a2 00 	lds	r24, 0x00A2
 378:	1e d1       	rcall	.+572    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p3_addr | nrf_conf.write_reg);       // addr: 0x014.
 37a:	98 81       	ld	r25, Y
 37c:	80 91 a3 00 	lds	r24, 0x00A3
 380:	89 2b       	or	r24, r25
 382:	19 d1       	rcall	.+562    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p3);                                 // default  00000000b.
 384:	80 91 a4 00 	lds	r24, 0x00A4
 388:	16 d1       	rcall	.+556    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p4_addr | nrf_conf.write_reg);       // addr: 0x015.
 38a:	98 81       	ld	r25, Y
 38c:	80 91 a5 00 	lds	r24, 0x00A5
 390:	89 2b       	or	r24, r25
 392:	11 d1       	rcall	.+546    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p4);                                 // default  00000000b.
 394:	80 91 a6 00 	lds	r24, 0x00A6
 398:	0e d1       	rcall	.+540    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p5_addr | nrf_conf.write_reg);       // addr: 0x016.
 39a:	98 81       	ld	r25, Y
 39c:	80 91 a7 00 	lds	r24, 0x00A7
 3a0:	89 2b       	or	r24, r25
 3a2:	09 d1       	rcall	.+530    	; 0x5b6 <spi_load_byte>
      spi_load_byte(nrf_conf.rx_pw_p5);                                 // default  00000000b.
 3a4:	80 91 a8 00 	lds	r24, 0x00A8
 3a8:	06 d1       	rcall	.+524    	; 0x5b6 <spi_load_byte>
     break; 
 3aa:	26 c0       	rjmp	.+76     	; 0x3f8 <nrf_send_config+0x174>

		 case 2: // configure the nRF24L01 as transmitter & power_up.
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // 00100000b.
 3ac:	90 91 ac 00 	lds	r25, 0x00AC
 3b0:	80 91 7b 00 	lds	r24, 0x007B
 3b4:	89 2b       	or	r24, r25
 3b6:	ff d0       	rcall	.+510    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.config | nrf_conf.pw_up);                  // 00010010b.
 3b8:	90 91 ad 00 	lds	r25, 0x00AD
 3bc:	80 91 7c 00 	lds	r24, 0x007C
 3c0:	89 2b       	or	r24, r25
 3c2:	f9 d0       	rcall	.+498    	; 0x5b6 <spi_load_byte>
     break; 
 3c4:	19 c0       	rjmp	.+50     	; 0x3f8 <nrf_send_config+0x174>

		 case 3: // configure the nRF24L01 as receiver & power_up.
			spi_load_byte(nrf_conf.config_addr | nrf_conf.write_reg);         // 00100000b.
 3c6:	90 91 ac 00 	lds	r25, 0x00AC
 3ca:	80 91 7b 00 	lds	r24, 0x007B
 3ce:	89 2b       	or	r24, r25
 3d0:	f2 d0       	rcall	.+484    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.config | nrf_conf.pw_up | nrf_conf.txrx);  // 00010011b.
 3d2:	90 91 ad 00 	lds	r25, 0x00AD
 3d6:	80 91 7c 00 	lds	r24, 0x007C
 3da:	89 2b       	or	r24, r25
 3dc:	90 91 ab 00 	lds	r25, 0x00AB
 3e0:	89 2b       	or	r24, r25
 3e2:	e9 d0       	rcall	.+466    	; 0x5b6 <spi_load_byte>
     break;
 3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <nrf_send_config+0x174>

		 case 4: // clear the nRF24L01 status register.
			spi_load_byte(nrf_conf.status_addr | nrf_conf.write_reg);         // 00100111b.
 3e6:	90 91 ac 00 	lds	r25, 0x00AC
 3ea:	80 91 89 00 	lds	r24, 0x0089
 3ee:	89 2b       	or	r24, r25
 3f0:	e2 d0       	rcall	.+452    	; 0x5b6 <spi_load_byte>
			spi_load_byte(nrf_conf.status);                                   // 01110000b.
 3f2:	80 91 8a 00 	lds	r24, 0x008A
 3f6:	df d0       	rcall	.+446    	; 0x5b6 <spi_load_byte>
	    }
	    spi_exchange(0);                                                   // send configuration bytes.
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	f7 d0       	rcall	.+494    	; 0x5ea <spi_exchange>
	  return;
  	 
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <nrf_reset_status>:
//

//////////////////////////////////////////////////////////////
// clear the status register of the nRF24L01
//////////////////////////////////////////////////////////////
void nrf_reset_status(){
 402:	cf 93       	push	r28
  //char aux = nrf_ce;
 char aux = NRF_CE_PORT&(1<<NRF_CE_BV);
 404:	c2 b3       	in	r28, 0x12	; 18
    //nrf_ce = 0;                     	        // to be sure the nRF  is a transmitter.
	NRF_CE_low();
 406:	95 98       	cbi	0x12, 5	; 18
    nrf_conf.status_addr = NRF_STATUS;        // 0x07 (address).
 408:	87 e0       	ldi	r24, 0x07	; 7
 40a:	80 93 89 00 	sts	0x0089, r24
    nrf_conf.status      = NRF_STAT_CLEAR;    // 01110000b. 
 40e:	80 e7       	ldi	r24, 0x70	; 112
 410:	80 93 8a 00 	sts	0x008A, r24
	  nrf_send_config(4);
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	36 df       	rcall	.-404    	; 0x284 <nrf_send_config>
      if (aux)
 418:	c5 fd       	sbrc	r28, 5
      //nrf_ce = true;                          // returns as receiver.  
	    NRF_CE_high();
 41a:	95 9a       	sbi	0x12, 5	; 18
  return;	
}
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <nrf_tx_mode>:
//////////////////////////////////////////////////////////////
// Program the nRF in transmit mode
//////////////////////////////////////////////////////////////
void nrf_tx_mode(){

  nrf_conf.config_addr = NRF_CONFIG;        // 0x00 (address).
 420:	10 92 7b 00 	sts	0x007B, r1
	nrf_conf.write_reg = NRF_W_REG;
 424:	80 e2       	ldi	r24, 0x20	; 32
 426:	80 93 ac 00 	sts	0x00AC, r24
	nrf_conf.txrx = NRF_TX;
 42a:	10 92 ab 00 	sts	0x00AB, r1
  nrf_conf.pw_up = NRF_PWR_UP;
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	80 93 ad 00 	sts	0x00AD, r24
	nrf_send_config(2);
 434:	27 df       	rcall	.-434    	; 0x284 <nrf_send_config>

  //nrf_ce = 0;                               // enable transmition.
  NRF_CE_low();
 436:	95 98       	cbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	88 e2       	ldi	r24, 0x28	; 40
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <nrf_tx_mode+0x1a>
 43e:	08 95       	ret

00000440 <nrf_basic_config>:
// Change parameters like channel and datawidth here
//////////////////////////////////////////////////////////////
void nrf_basic_config() {

	// Program the settings for the nrf
	nrf_conf.config_addr    = NRF_CONFIG;     // 0x00.
 440:	10 92 7b 00 	sts	0x007B, r1
  nrf_conf.config         = CONFIG_DEF;     // 00001000b (default)
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	80 93 7c 00 	sts	0x007C, r24
  nrf_conf.en_aa_addr     = NRF_EN_AA;      // 0x01.
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	80 93 7d 00 	sts	0x007D, r24
  nrf_conf.en_aa          = EN_AA_DEF;      // 00111111b (default)
 450:	10 92 7e 00 	sts	0x007E, r1
  nrf_conf.en_rxaddr_addr = NRF_EN_RXADDR;  // 0x02.
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	80 93 7f 00 	sts	0x007F, r24
  nrf_conf.en_rxaddr      = EN_RXADDR_DEF;  // 00000011b (default)
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	80 93 80 00 	sts	0x0080, r24
  nrf_conf.setup_aw_addr  = NRF_SETUP_AW;   // 0x03.
 460:	80 93 81 00 	sts	0x0081, r24
  nrf_conf.setup_aw       = SETUP_AW_DEF;   // 00000011b (default)
 464:	80 93 82 00 	sts	0x0082, r24
  nrf_conf.setup_ptr_addr = NRF_SETUP_RTR ; // 0x04.
 468:	94 e0       	ldi	r25, 0x04	; 4
 46a:	90 93 83 00 	sts	0x0083, r25
  nrf_conf.setup_ptr      = SETUP_RTR_DEF;  // 00000011b (default)
 46e:	80 93 84 00 	sts	0x0084, r24
  nrf_conf.rf_channel_addr= NRF_CHANNEL;    // 0x05.
 472:	95 e0       	ldi	r25, 0x05	; 5
 474:	90 93 85 00 	sts	0x0085, r25
  nrf_conf.rf_channel     = CHANNEL_DEF;    // 00000010b (default)
 478:	9c e0       	ldi	r25, 0x0C	; 12
 47a:	90 93 86 00 	sts	0x0086, r25
  nrf_conf.rf_setup_addr  = NRF_RF_SETUP;   // 0x06.
 47e:	96 e0       	ldi	r25, 0x06	; 6
 480:	90 93 87 00 	sts	0x0087, r25
  nrf_conf.rf_setup       = RF_SETUP_DEF;   // 00001111b (default)
 484:	97 e0       	ldi	r25, 0x07	; 7
 486:	90 93 88 00 	sts	0x0088, r25
 
  nrf_conf.rx_addr_p0_addr= NRF_RX_ADDR_P0; // 0x0A - 0xF  writes 6 times to the
 48a:	9a e0       	ldi	r25, 0x0A	; 10
 48c:	90 93 8f 00 	sts	0x008F, r25
  nrf_conf.rx_addr_p0     = RX_ADDR_P0_DEF; // same address to increase the pointer.  
 490:	97 ee       	ldi	r25, 0xE7	; 231
 492:	90 93 90 00 	sts	0x0090, r25
  nrf_conf.rx_addr_p1_addr= NRF_RX_ADDR_P1; // 0x0B - 0xF  writes 6 times to the
 496:	2b e0       	ldi	r18, 0x0B	; 11
 498:	20 93 91 00 	sts	0x0091, r18
  nrf_conf.rx_addr_p1     = RX_ADDR_P1_DEF; // same address to increase the pointer. 
 49c:	22 ec       	ldi	r18, 0xC2	; 194
 49e:	20 93 92 00 	sts	0x0092, r18
                                            // 0x0C -0x0F not sent (no use in his project)
  nrf_conf.tx_addr_addr   = NRF_TX_ADDR;    // 0x10
 4a2:	20 e1       	ldi	r18, 0x10	; 16
 4a4:	20 93 9b 00 	sts	0x009B, r18
  nrf_conf.tx_addr        = TX_DEF;         // 00000000b; (addr. 0x10)
 4a8:	90 93 9c 00 	sts	0x009C, r25

  nrf_conf.rx_pw_p0_addr  = NRF_RX_PW_P0;   // 0x11     
 4ac:	91 e1       	ldi	r25, 0x11	; 17
 4ae:	90 93 9d 00 	sts	0x009D, r25
  nrf_conf.rx_pw_p0       = RX_PW_P0_DEF;   // 00000010b (sets payload to 2 bytes, default = 0x00)
 4b2:	80 93 9e 00 	sts	0x009E, r24
  nrf_conf.rx_pw_p1_addr  = NRF_RX_PW_P1;   // 0x12
 4b6:	82 e1       	ldi	r24, 0x12	; 18
 4b8:	80 93 9f 00 	sts	0x009F, r24
  nrf_conf.rx_pw_p1       = RX_PW_P1_DEF;   // 00000010b (sets payload to 2 bytes, default = 0x00)
 4bc:	10 92 a0 00 	sts	0x00A0, r1
  nrf_conf.rx_pw_p2_addr  = NRF_RX_PW_P2;   // 0x13
 4c0:	83 e1       	ldi	r24, 0x13	; 19
 4c2:	80 93 a1 00 	sts	0x00A1, r24
  nrf_conf.rx_pw_p2       = RX_PW_P2_DEF;   // 00000000b (default)
 4c6:	10 92 a2 00 	sts	0x00A2, r1
  nrf_conf.rx_pw_p3_addr  = NRF_RX_PW_P3;   // 0x14
 4ca:	84 e1       	ldi	r24, 0x14	; 20
 4cc:	80 93 a3 00 	sts	0x00A3, r24
  nrf_conf.rx_pw_p3       = RX_PW_P3_DEF;   // 00000000b (default)
 4d0:	10 92 a4 00 	sts	0x00A4, r1
  nrf_conf.rx_pw_p4_addr  = NRF_RX_PW_P4;   // 0x15
 4d4:	85 e1       	ldi	r24, 0x15	; 21
 4d6:	80 93 a5 00 	sts	0x00A5, r24
  nrf_conf.rx_pw_p4       = RX_PW_P4_DEF;   // 00000000b (default)
 4da:	10 92 a6 00 	sts	0x00A6, r1
  nrf_conf.rx_pw_p5_addr  = NRF_RX_PW_P5;   // 0x16
 4de:	86 e1       	ldi	r24, 0x16	; 22
 4e0:	80 93 a7 00 	sts	0x00A7, r24
  nrf_conf.rx_pw_p5       = RX_PW_P5_DEF;   // 00000000b (default)
 4e4:	10 92 a8 00 	sts	0x00A8, r1

	nrf_conf.write_reg      = NRF_W_REG ;     // 00100000b  // 000A AAAA.
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	80 93 ac 00 	sts	0x00AC, r24

 	nrf_send_config(1);                       // configure the device.
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	c9 de       	rcall	.-622    	; 0x284 <nrf_send_config>
 4f2:	08 95       	ret

000004f4 <nrf_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f4:	87 e2       	ldi	r24, 0x27	; 39
 4f6:	93 e2       	ldi	r25, 0x23	; 35
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <nrf_init+0x4>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <nrf_init+0xa>
 4fe:	00 00       	nop
void nrf_init() {

	  //delay_ms(3);
	  _delay_ms(3);

	  spi_init();                 // Init the SPI interface, enables INTCON, 6,7.
 500:	48 d0       	rcall	.+144    	; 0x592 <spi_init>
	
	  //nrf_ce = 0;                 // RC,Pin35: CE 0 = transmitter, CE 1 = receiver.
	  NRF_CE_low();
 502:	95 98       	cbi	0x12, 5	; 18
	  //nrf_cs = 1;                 // RC,Pin36: nRF24L01 desactivated.     
	  NRF_CS_high();
 504:	94 9a       	sbi	0x12, 4	; 18

	  nrf_basic_config();
 506:	9c df       	rcall	.-200    	; 0x440 <nrf_basic_config>
 508:	08 95       	ret

0000050a <nrf_put_byte>:

////////////////////////////////////////////////////////////////////////
// Write data to the nrf and transmit
//
////////////////////////////////////////////////////////////////////////
void nrf_put_byte(){
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29

    unsigned char load_byte;
    char flag = 1;

    nrf_conf.w_tx_payload = W_TX_PAYLOAD;       // loads 0xA0, payload address.
 50e:	cf ea       	ldi	r28, 0xAF	; 175
 510:	d0 e0       	ldi	r29, 0x00	; 0
 512:	80 ea       	ldi	r24, 0xA0	; 160
 514:	88 83       	st	Y, r24
      
	  spi_init_buffer();                          // pointer to 0;
 516:	4c d0       	rcall	.+152    	; 0x5b0 <spi_init_buffer>

      spi_load_byte(nrf_conf.w_tx_payload);     // addr: 0xA0.
 518:	88 81       	ld	r24, Y
 51a:	4d d0       	rcall	.+154    	; 0x5b6 <spi_load_byte>
	  spi_load_byte(load_byte = 1); // 
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	4b d0       	rcall	.+150    	; 0x5b6 <spi_load_byte>
      spi_load_byte(load_byte = 2); // 
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	49 d0       	rcall	.+146    	; 0x5b6 <spi_load_byte>
      spi_load_byte(load_byte = 3); // 
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	47 d0       	rcall	.+142    	; 0x5b6 <spi_load_byte>

    spi_exchange(flag);                         // send configuration bytes.
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	5f d0       	rcall	.+190    	; 0x5ea <spi_exchange>
    flag = 0;
 	  //nrf_ce = 1;                                 // toggle CE for 10us to send the data.
	   NRF_CE_high();
 52c:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52e:	88 e2       	ldi	r24, 0x28	; 40
 530:	8a 95       	dec	r24
 532:	f1 f7       	brne	.-4      	; 0x530 <nrf_put_byte+0x26>
    //delay_ms(1);                                // should work with 10us.
	_delay_us(10);                                
  	//nrf_ce = 0; 
	  NRF_CE_low();
 534:	95 98       	cbi	0x12, 5	; 18
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <nrf_irq_jack>:
//
//

char nrf_irq_jack()                             // something happend?
  {
    if (NRF_IRQ_read)
 53c:	80 b3       	in	r24, 0x10	; 16
    return true;
    else
    return false;                               // IRQ active(low), data has been sent/received.
  }
 53e:	83 fb       	bst	r24, 3
 540:	88 27       	eor	r24, r24
 542:	80 f9       	bld	r24, 0
 544:	08 95       	ret

00000546 <main>:

int main(void)
	{
	
	
	sei(); //global interrupt enable
 546:	78 94       	sei
	
	
	spi_init();
 548:	24 d0       	rcall	.+72     	; 0x592 <spi_init>
	nrf_init();
 54a:	d4 df       	rcall	.-88     	; 0x4f4 <nrf_init>
	nrf_tx_mode();
 54c:	69 df       	rcall	.-302    	; 0x420 <nrf_tx_mode>
	nrf_reset_status();
 54e:	59 df       	rcall	.-334    	; 0x402 <nrf_reset_status>

	
	setup_charlie();
 550:	0a de       	rcall	.-1004   	; 0x166 <setup_charlie>
	
	
	
	roll_charlie();
 552:	78 de       	rcall	.-784    	; 0x244 <roll_charlie>
	while (1)
		{
			//spi_load_byte(load_byte = 'a'); //
			//spi_load_byte(load_byte = 'b'); //
			//spi_load_byte(load_byte = 'c'); //
		      nrf_put_byte();                       // send data wireless with nRF24L01.
 554:	da df       	rcall	.-76     	; 0x50a <nrf_put_byte>
		      if (nrf_irq_jack()) set_charlie(12);             // waits until data has been sent.
 556:	f2 df       	rcall	.-28     	; 0x53c <nrf_irq_jack>
 558:	88 23       	and	r24, r24
 55a:	11 f0       	breq	.+4      	; 0x560 <main+0x1a>
 55c:	8c e0       	ldi	r24, 0x0C	; 12
 55e:	10 de       	rcall	.-992    	; 0x180 <set_charlie>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 560:	2f e7       	ldi	r18, 0x7F	; 127
 562:	8e ee       	ldi	r24, 0xEE	; 238
 564:	96 e3       	ldi	r25, 0x36	; 54
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x20>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x2a>
 570:	00 00       	nop
			  _delay_ms(1500);
		      nrf_reset_status();
 572:	47 df       	rcall	.-370    	; 0x402 <nrf_reset_status>
			  if (nrf_irq_jack()) set_charlie(11);             // waits until data has been sent.
 574:	e3 df       	rcall	.-58     	; 0x53c <nrf_irq_jack>
 576:	88 23       	and	r24, r24
 578:	11 f0       	breq	.+4      	; 0x57e <main+0x38>
 57a:	8b e0       	ldi	r24, 0x0B	; 11
 57c:	01 de       	rcall	.-1022   	; 0x180 <set_charlie>
 57e:	2f e7       	ldi	r18, 0x7F	; 127
 580:	8e ee       	ldi	r24, 0xEE	; 238
 582:	96 e3       	ldi	r25, 0x36	; 54
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <main+0x3e>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <main+0x48>
 58e:	00 00       	nop
 590:	e1 cf       	rjmp	.-62     	; 0x554 <main+0xe>

00000592 <spi_init>:

  // DDR settings
	// outputs
	
	
	SPI_SS_DDR |= 1<<(SPI_SS_BV); //Set slave select to output so it doesn't interfere with SPI operation
 592:	ba 9a       	sbi	0x17, 2	; 23
	
	SPI_SCK_DDR|=(1<<SPI_SCK_BV);
 594:	bd 9a       	sbi	0x17, 5	; 23
	SPI_MOSI_DDR|=(1<<SPI_MOSI_BV);
 596:	bb 9a       	sbi	0x17, 3	; 23
	SPI_CS_DDR|=(1<<SPI_MISO_BV);
 598:	8c 9a       	sbi	0x11, 4	; 17
	SPI_CE_DDR|=(1<<SPI_CE_BV);
 59a:	8d 9a       	sbi	0x11, 5	; 17
	
	// inputs
	SPI_MOSI_DDR &= ~(1<<SPI_MOSI_BV);
 59c:	bb 98       	cbi	0x17, 3	; 23
	SPI_IRQ_DDR &= ~(1<<SPI_IRQ_BV);
 59e:	8b 98       	cbi	0x11, 3	; 17
	
	

SPCR = (1<<SPE)|(1<<MSTR);			  //Enable SPI, Master, set clock rate fck/4
 5a0:	80 e5       	ldi	r24, 0x50	; 80
 5a2:	8d b9       	out	0x0d, r24	; 13
SPSR |= (1<<SPI2X);				      //double speed fck/2 (6MHz)
 5a4:	70 9a       	sbi	0x0e, 0	; 14


spi_pointer = 0;          // init the buffer pointers
 5a6:	10 92 63 00 	sts	0x0063, r1
spi_counter = 0;	
 5aa:	10 92 62 00 	sts	0x0062, r1
 5ae:	08 95       	ret

000005b0 <spi_init_buffer>:

//////////////////////////////////////////////////////////////////////
// Init the databuffer of the SPI code
//////////////////////////////////////////////////////////////////////
void spi_init_buffer(){
	spi_pointer = 0;
 5b0:	10 92 63 00 	sts	0x0063, r1
 5b4:	08 95       	ret

000005b6 <spi_load_byte>:

//////////////////////////////////////////////////////////////////////
// Add a byte to the SPI TX buffer
//////////////////////////////////////////////////////////////////////
void spi_load_byte(unsigned char input){
	spi_data_buffer[spi_pointer] = input;
 5b6:	90 91 63 00 	lds	r25, 0x0063
 5ba:	e9 2f       	mov	r30, r25
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	ea 54       	subi	r30, 0x4A	; 74
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	80 83       	st	Z, r24
	spi_pointer++;
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	90 93 63 00 	sts	0x0063, r25
 5ca:	08 95       	ret

000005cc <spi_Read_Write>:
//

unsigned char spi_Read_Write(unsigned char byte)
{
  //sspbuf = byte;
  SPDR = byte;
 5cc:	8f b9       	out	0x0f, r24	; 15
  while(!(SPSR & (1<<SPIF))); //wait for empty transmit buffer <- probably what causes the shitty halting. :/
 5ce:	77 9b       	sbis	0x0e, 7	; 14
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <spi_Read_Write+0x2>
  //while (!test_bit (sspstat,0));                                      // waits for byte sent.
  spi_pointer++;
 5d2:	80 91 63 00 	lds	r24, 0x0063
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	80 93 63 00 	sts	0x0063, r24
  spi_counter--;
 5dc:	80 91 62 00 	lds	r24, 0x0062
 5e0:	81 50       	subi	r24, 0x01	; 1
 5e2:	80 93 62 00 	sts	0x0062, r24
  //return sspbuf;
  return SPDR;
 5e6:	8f b1       	in	r24, 0x0f	; 15
}
 5e8:	08 95       	ret

000005ea <spi_exchange>:
//

//////////////////////////////////////////////////////////////////////
// Initiate an SPI transaction
//////////////////////////////////////////////////////////////////////
void spi_exchange(char sw){
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	18 2f       	mov	r17, r24

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
 5f8:	80 91 63 00 	lds	r24, 0x0063
 5fc:	80 93 62 00 	sts	0x0062, r24
	spi_pointer = 0x00;
 600:	10 92 63 00 	sts	0x0063, r1
//////////////////////////////////////////////////////////////////////
// Initiate an SPI transaction
//////////////////////////////////////////////////////////////////////
void spi_exchange(char sw){

	uint8_t flag = 0x00; 
 604:	00 e0       	ldi	r16, 0x00	; 0
			{
			SPI_CS_high();
			flag = 0x00;
			_delay_us(10);
			}
		else flag = ~flag;
 606:	ff 24       	eor	r15, r15
 608:	fa 94       	dec	r15
    if (!sw)
		{
		if (flag)
			{
			SPI_CS_high();
			flag = 0x00;
 60a:	e1 2c       	mov	r14, r1

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
	spi_pointer = 0x00;
  	
	while (spi_counter)
 60c:	1a c0       	rjmp	.+52     	; 0x642 <spi_exchange+0x58>
    {
    SPI_CS_low();
 60e:	94 98       	cbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 610:	88 e2       	ldi	r24, 0x28	; 40
 612:	8a 95       	dec	r24
 614:	f1 f7       	brne	.-4      	; 0x612 <spi_exchange+0x28>
    _delay_us(10);

    data[spi_pointer] = spi_Read_Write(spi_data_buffer[spi_pointer]); // 1st address, 2nd data.
 616:	c0 91 63 00 	lds	r28, 0x0063
 61a:	d0 e0       	ldi	r29, 0x00	; 0
 61c:	fe 01       	movw	r30, r28
 61e:	ea 54       	subi	r30, 0x4A	; 74
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	80 81       	ld	r24, Z
 624:	d3 df       	rcall	.-90     	; 0x5cc <spi_Read_Write>
 626:	c8 52       	subi	r28, 0x28	; 40
 628:	df 4f       	sbci	r29, 0xFF	; 255
 62a:	88 83       	st	Y, r24
    
    if (!sw)
 62c:	11 11       	cpse	r17, r1
 62e:	09 c0       	rjmp	.+18     	; 0x642 <spi_exchange+0x58>
		{
		if (flag)
 630:	00 23       	and	r16, r16
 632:	31 f0       	breq	.+12     	; 0x640 <spi_exchange+0x56>
			{
			SPI_CS_high();
 634:	94 9a       	sbi	0x12, 4	; 18
 636:	88 e2       	ldi	r24, 0x28	; 40
 638:	8a 95       	dec	r24
 63a:	f1 f7       	brne	.-4      	; 0x638 <spi_exchange+0x4e>
			flag = 0x00;
 63c:	0e 2d       	mov	r16, r14
 63e:	01 c0       	rjmp	.+2      	; 0x642 <spi_exchange+0x58>
			_delay_us(10);
			}
		else flag = ~flag;
 640:	0f 2d       	mov	r16, r15

	uint8_t flag = 0x00; 
	spi_counter = spi_pointer;
	spi_pointer = 0x00;
  	
	while (spi_counter)
 642:	90 91 62 00 	lds	r25, 0x0062
 646:	91 11       	cpse	r25, r1
 648:	e2 cf       	rjmp	.-60     	; 0x60e <spi_exchange+0x24>
			}
		else flag = ~flag;
		}
    }
    sw = 0x00;
    SPI_CS_high();
 64a:	94 9a       	sbi	0x12, 4	; 18
 64c:	88 e2       	ldi	r24, 0x28	; 40
 64e:	8a 95       	dec	r24
 650:	f1 f7       	brne	.-4      	; 0x64e <spi_exchange+0x64>
    _delay_us(10);
 
   return;
}
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
